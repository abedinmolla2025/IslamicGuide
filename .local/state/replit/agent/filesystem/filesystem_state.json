{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Islamic Companion App\n\n## Overview\n\nThis is a comprehensive Islamic mobile web application that provides essential Islamic tools and resources for daily religious practice. The app serves as a digital companion for Muslims, offering prayer times, Qibla direction, Quran verses, Islamic calendar, dhikr counter, and the 99 names of Allah (Asma ul Husna). Built as a progressive web app with a mobile-first design, it focuses on providing accurate Islamic information and tools in an accessible, user-friendly interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based architecture with TypeScript for type safety. The frontend is built using Vite as the build tool and development server, providing fast hot module replacement and optimized builds. The UI is constructed with shadcn/ui components, which are built on top of Radix UI primitives and styled with Tailwind CSS. This provides a consistent, accessible design system with customizable theming through CSS variables.\n\nThe application follows a component-based architecture with clear separation of concerns. Page components handle routing and high-level state management, while smaller components focus on specific functionality like prayer times, Qibla compass, and Quran verses. The app uses Wouter for client-side routing, providing a lightweight alternative to React Router.\n\nState management is handled through React Query (TanStack Query) for server state and React hooks for local component state. This approach provides efficient caching, background updates, and loading states for API data while keeping local state management simple and predictable.\n\n### Backend Architecture\nThe backend is built with Express.js running on Node.js, providing a RESTful API for the frontend. The server handles geolocation-based prayer time calculations, Qibla direction computation, Quran verse retrieval, and Islamic calendar data. The API is designed to be stateless and focuses on providing accurate Islamic calculations and data.\n\nThe server implements middleware for request logging, CORS handling, and error management. Routes are organized by functionality (prayer times, Qibla, Quran, calendar) and provide JSON responses with appropriate HTTP status codes.\n\n### Data Storage Strategy\nThe application uses a dual storage approach. For development and simple deployments, it includes an in-memory storage implementation that provides all required functionality without external dependencies. For production deployments, the system is configured to use PostgreSQL with Drizzle ORM for type-safe database operations.\n\nThe database schema includes tables for users, prayer times, Quran verses, and Islamic events. The schema is designed with proper relationships and indexing for efficient queries. Prayer times are cached by location and date to avoid repeated calculations, while Quran verses and Islamic events are stored for quick retrieval.\n\n### Mobile-First Design\nThe application is specifically designed as a mobile web app with a maximum width constraint and responsive design. The interface uses a bottom navigation pattern common in mobile apps, with a card-based layout that works well on touch devices. The design includes Islamic-inspired styling with appropriate color schemes and typography.\n\nThe app implements device APIs where available, including geolocation for automatic location detection and device orientation for the Qibla compass functionality. The interface gracefully handles cases where these APIs are not available or permission is denied.\n\n### Authentication and User Management\nThe application includes a user system for personalized features like favorite verses, dhikr counts, and location preferences. User authentication is handled through traditional session-based authentication with secure password storage. The system allows users to save their preferred calculation methods for prayer times and maintain personal Islamic data.\n\n## External Dependencies\n\n### Database and ORM\n- **PostgreSQL**: Primary database for production deployments, chosen for its reliability and JSON support for complex Islamic data\n- **Neon Database**: Serverless PostgreSQL provider configured through `@neondatabase/serverless` package\n- **Drizzle ORM**: Type-safe database toolkit providing schema definition, migrations, and query building with full TypeScript support\n\n### UI and Styling Framework\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives for building the component library\n- **Tailwind CSS**: Utility-first CSS framework for consistent styling and responsive design\n- **shadcn/ui**: Pre-built component library combining Radix UI with Tailwind CSS for a complete design system\n- **Lucide React**: Modern icon library providing Islamic-appropriate iconography\n\n### State Management and Data Fetching\n- **TanStack React Query**: Powerful data synchronization library for server state management, caching, and background updates\n- **React Hook Form**: Performant form library with minimal re-renders and built-in validation\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server with hot module replacement\n- **TypeScript**: Static type checking for improved code quality and developer experience\n- **ESBuild**: Fast JavaScript bundler used by Vite for production builds\n\n### Islamic Calculation Libraries\nThe application implements custom Islamic calculations for prayer times and Qibla direction rather than relying on external libraries. This approach ensures accuracy and allows for customization of calculation methods (ISNA, Muslim World League, etc.) based on user preferences and geographic regions.\n\n### Geolocation and Device APIs\nThe app utilizes browser APIs for geolocation services to automatically detect user location for prayer times and Qibla direction. Device orientation APIs are used for the compass functionality where supported by the device and browser.\n\n### Progressive Web App (PWA) Implementation\nThe application is configured as a Progressive Web App with full PWA infrastructure:\n- **manifest.json**: Defines app metadata, icons, theme colors, and display mode\n- **service-worker.js**: Enables offline functionality and app-like installation\n- **Install prompt**: Captures the browser's `beforeinstallprompt` event for one-click installation on Android devices\n- **Icons**: Complete icon set (192x192, 512x512) for various device sizes\n\nThe PWA implementation allows users to install the app directly from their browser with a single click, providing an app-like experience without going through app stores.\n\n### Android APK Download\nThe app provides options for Android users to get the application:\n1. **One-Click PWA Install**: True one-click installation via browser's native install prompt (works on Chrome/Edge for Android)\n2. **APK Generation**: Link to PWABuilder for users who need a downloadable APK file\n\nFor true one-click APK downloads, see `APK_GENERATION_GUIDE.md` for instructions on generating and hosting a pre-built APK file.","size_bytes":7136},"server.js":{"content":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst app = express();\n\n// এখানে বসাবেন 👇\napp.use(cors({\n  origin: \"https://islamic-guide-theta.vercel.app\"\n}));\n\n// Example route\napp.get(\"/api/ping\", (req, res) => {\n  res.json({ message: \"pong from backend\" });\n});\n\napp.listen(3000, () => {\n  console.log(\"✅ Server running\");\n});\n","size_bytes":376},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2955},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPrayerTimesSchema } from \"@shared/schema\";\nimport { generateDailyQuiz } from \"./openai-quiz\";\nimport { enhanceVerseWithAI } from \"./openai-verse\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Prayer times routes\n  app.get(\"/api/prayer-times\", async (req, res) => {\n    try {\n      const { latitude, longitude, date } = req.query;\n      \n      if (!latitude || !longitude || !date) {\n        return res.status(400).json({ message: \"Latitude, longitude, and date are required\" });\n      }\n\n      const lat = parseFloat(latitude as string);\n      const lng = parseFloat(longitude as string);\n      \n      // Check if we have cached prayer times\n      let prayerTimes = await storage.getPrayerTimes(lat, lng, date as string);\n      \n      if (!prayerTimes) {\n        // Calculate prayer times using a simple algorithm\n        // In a real app, you'd use a proper Islamic prayer time calculation library\n        const now = new Date();\n        const prayerTimesData = {\n          userId: null,\n          date: date as string,\n          fajr: \"05:20\",\n          sunrise: \"06:45\",\n          dhuhr: \"12:30\",\n          asr: \"15:45\",\n          maghrib: \"18:12\",\n          isha: \"19:35\",\n          latitude: lat,\n          longitude: lng,\n          calculationMethod: \"ISNA\"\n        };\n        \n        prayerTimes = await storage.savePrayerTimes(prayerTimesData);\n      }\n      \n      res.json(prayerTimes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get prayer times\" });\n    }\n  });\n\n  // Qibla direction route\n  app.get(\"/api/qibla\", async (req, res) => {\n    try {\n      const { latitude, longitude } = req.query;\n      \n      if (!latitude || !longitude) {\n        return res.status(400).json({ message: \"Latitude and longitude are required\" });\n      }\n\n      const lat = parseFloat(latitude as string);\n      const lng = parseFloat(longitude as string);\n      \n      // Kaaba coordinates\n      const kaabaLat = 21.422487;\n      const kaabaLng = 39.826206;\n      \n      // Calculate direction to Kaaba\n      const dLng = (kaabaLng - lng) * Math.PI / 180;\n      const lat1Rad = lat * Math.PI / 180;\n      const lat2Rad = kaabaLat * Math.PI / 180;\n      \n      const y = Math.sin(dLng) * Math.cos(lat2Rad);\n      const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLng);\n      \n      let bearing = Math.atan2(y, x) * 180 / Math.PI;\n      bearing = (bearing + 360) % 360;\n      \n      // Calculate distance to Kaaba\n      const R = 6371; // Earth's radius in km\n      const dLat = (kaabaLat - lat) * Math.PI / 180;\n      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                Math.cos(lat1Rad) * Math.cos(lat2Rad) *\n                Math.sin(dLng/2) * Math.sin(dLng/2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n      const distance = R * c;\n      \n      res.json({\n        direction: Math.round(bearing),\n        distance: Math.round(distance),\n        compassDirection: getCompassDirection(bearing)\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate Qibla direction\" });\n    }\n  });\n\n  // Quran verses routes\n  app.get(\"/api/quran/random\", async (req, res) => {\n    try {\n      let verse = await storage.getRandomQuranVerse();\n      if (!verse) {\n        return res.status(404).json({ message: \"No verses found\" });\n      }\n      \n      // Enhance verse with AI if it doesn't have Bengali translation or AI insights\n      if (!verse.translationBengali || !verse.aiInsight) {\n        verse = await enhanceVerseWithAI(verse);\n      }\n      \n      res.json(verse);\n    } catch (error) {\n      console.error(\"Error in /api/quran/random:\", error);\n      res.status(500).json({ message: \"Failed to get random verse\" });\n    }\n  });\n\n  app.get(\"/api/quran/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const verses = await storage.searchQuranVerses(q as string);\n      res.json(verses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search verses\" });\n    }\n  });\n\n  app.get(\"/api/quran/:surah/:verse\", async (req, res) => {\n    try {\n      const { surah, verse } = req.params;\n      const surahNumber = parseInt(surah);\n      const verseNumber = parseInt(verse);\n      \n      const quranVerse = await storage.getQuranVerse(surahNumber, verseNumber);\n      if (!quranVerse) {\n        return res.status(404).json({ message: \"Verse not found\" });\n      }\n      \n      res.json(quranVerse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get verse\" });\n    }\n  });\n\n  // Islamic events route\n  app.get(\"/api/islamic-events\", async (req, res) => {\n    try {\n      const events = await storage.getIslamicEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get Islamic events\" });\n    }\n  });\n\n  // User dhikr counter route\n  app.post(\"/api/dhikr/increment\", async (req, res) => {\n    try {\n      // For now, we'll use a simple in-memory counter\n      // In a real app, this would be tied to user authentication\n      res.json({ count: Math.floor(Math.random() * 100) + 1 });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to increment dhikr count\" });\n    }\n  });\n\n  // Islamic names routes\n  app.get(\"/api/islamic-names\", async (req, res) => {\n    try {\n      const { gender, category } = req.query;\n      const names = await storage.getIslamicNames(\n        gender as string, \n        category as string\n      );\n      res.json(names);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get Islamic names\" });\n    }\n  });\n\n  app.get(\"/api/islamic-names/search\", async (req, res) => {\n    try {\n      const { q, gender } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const names = await storage.searchIslamicNames(q as string, gender as string);\n      res.json(names);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search Islamic names\" });\n    }\n  });\n\n  app.get(\"/api/islamic-names/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const name = await storage.getIslamicNameById(id);\n      \n      if (!name) {\n        return res.status(404).json({ message: \"Name not found\" });\n      }\n      \n      res.json(name);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get Islamic name\" });\n    }\n  });\n\n  // Daily Quiz routes\n  app.get(\"/api/daily-quiz\", async (req, res) => {\n    try {\n      let quiz = await storage.getDailyQuiz();\n      \n      if (!quiz) {\n        const quizData = await generateDailyQuiz();\n        quiz = await storage.saveDailyQuiz(quizData);\n      }\n      \n      res.json(quiz);\n    } catch (error) {\n      console.error(\"Daily quiz error:\", error);\n      res.status(500).json({ message: \"Failed to get daily quiz\" });\n    }\n  });\n\n  app.post(\"/api/daily-quiz/refresh\", async (req, res) => {\n    try {\n      const quizData = await generateDailyQuiz();\n      const quiz = await storage.saveDailyQuiz(quizData);\n      res.json(quiz);\n    } catch (error) {\n      console.error(\"Quiz refresh error:\", error);\n      res.status(500).json({ message: \"Failed to refresh quiz\" });\n    }\n  });\n\n  // APK download endpoint\n  app.get(\"/download/apk\", (req, res) => {\n    const protocol = req.headers['x-forwarded-proto'] || 'https';\n    const host = req.headers.host || req.headers['x-forwarded-host'];\n    const fullUrl = `${protocol}://${host}`;\n    \n    const pwaBuilderUrl = `https://www.pwabuilder.com/reportcard?site=${encodeURIComponent(fullUrl)}`;\n    res.redirect(pwaBuilderUrl);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction getCompassDirection(bearing: number): string {\n  const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n  const index = Math.round(bearing / 22.5) % 16;\n  return directions[index];\n}\n","size_bytes":8271},"server/storage.ts":{"content":"import { type User, type InsertUser, type PrayerTimes, type InsertPrayerTimes, type QuranVerse, type IslamicEvent, type IslamicName, type InsertIslamicName, type DailyQuiz, type InsertDailyQuiz, type Hadith, type InsertHadith } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { islamicNames as namesData } from \"../client/src/data/islamic-names\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  \n  getPrayerTimes(latitude: number, longitude: number, date: string): Promise<PrayerTimes | undefined>;\n  savePrayerTimes(prayerTimes: InsertPrayerTimes): Promise<PrayerTimes>;\n  \n  getQuranVerse(surahNumber: number, verseNumber: number): Promise<QuranVerse | undefined>;\n  getRandomQuranVerse(): Promise<QuranVerse | undefined>;\n  searchQuranVerses(query: string): Promise<QuranVerse[]>;\n  \n  getIslamicEvents(): Promise<IslamicEvent[]>;\n  \n  getIslamicNames(gender?: string, category?: string): Promise<IslamicName[]>;\n  searchIslamicNames(query: string, gender?: string): Promise<IslamicName[]>;\n  getIslamicNameById(id: string): Promise<IslamicName | undefined>;\n  \n  getDailyQuiz(): Promise<DailyQuiz | undefined>;\n  saveDailyQuiz(quiz: InsertDailyQuiz): Promise<DailyQuiz>;\n  \n  getRandomHadith(): Promise<Hadith | undefined>;\n  getDailyHadith(): Promise<Hadith | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private prayerTimes: Map<string, PrayerTimes>;\n  private quranVerses: Map<string, QuranVerse>;\n  private islamicEvents: Map<string, IslamicEvent>;\n  private islamicNames: Map<string, IslamicName>;\n  private dailyQuizzes: Map<string, DailyQuiz>;\n  private hadiths: Map<string, Hadith>;\n  private currentQuizDate: string | null;\n\n  constructor() {\n    this.users = new Map();\n    this.prayerTimes = new Map();\n    this.quranVerses = new Map();\n    this.islamicEvents = new Map();\n    this.islamicNames = new Map();\n    this.dailyQuizzes = new Map();\n    this.currentQuizDate = null;\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize with some Quran verses\n    const verses = [\n      {\n        id: randomUUID(),\n        surahNumber: 65,\n        verseNumber: 2,\n        arabic: \"وَمَن يَتَّقِ ٱللَّهَ يَجْعَل لَّهُۥ مَخْرَجًا\",\n        translation: \"And whoever fears Allah - He will make for him a way out.\",\n        translationBengali: null,\n        transliteration: \"Wa man yattaqi Allaha yaj'al lahu makhrajan\",\n        surahName: \"At-Talaq\",\n        surahNameBengali: null,\n        aiInsight: null,\n        aiInsightBengali: null\n      },\n      {\n        id: randomUUID(),\n        surahNumber: 2,\n        verseNumber: 255,\n        arabic: \"ٱللَّهُ لَآ إِلَـٰهَ إِلَّا هُوَ ٱلۡحَيُّ ٱلۡقَيُّومُۚ لَا تَأۡخُذُهُۥ سِنَةٞ وَلَا نَوۡمٞۚ\",\n        translation: \"Allah - there is no deity except Him, the Ever-Living, the Sustainer of existence. Neither drowsiness overtakes Him nor sleep.\",\n        translationBengali: null,\n        transliteration: \"Allahu la ilaha illa huwa al-hayyu al-qayyum. La ta'khuzuhu sinatun wa la nawm.\",\n        surahName: \"Al-Baqarah\",\n        surahNameBengali: null,\n        aiInsight: null,\n        aiInsightBengali: null\n      }\n    ];\n\n    verses.forEach(verse => {\n      this.quranVerses.set(verse.id, verse);\n    });\n\n    // Initialize Islamic events\n    const events = [\n      {\n        id: randomUUID(),\n        hijriDate: \"1 Muharram 1445\",\n        gregorianDate: \"2023-07-19\",\n        title: \"Islamic New Year\",\n        description: \"First day of the Islamic calendar\",\n        isImportant: true\n      },\n      {\n        id: randomUUID(),\n        hijriDate: \"10 Muharram 1445\",\n        gregorianDate: \"2023-07-28\",\n        title: \"Day of Ashura\",\n        description: \"Important day of fasting and remembrance\",\n        isImportant: true\n      }\n    ];\n\n    events.forEach(event => {\n      this.islamicEvents.set(event.id, event);\n    });\n\n    // Initialize Islamic names with all 500 names\n    const names = namesData.map(nameData => ({\n      id: randomUUID(),\n      name: nameData.name,\n      nameArabic: nameData.nameArabic,\n      nameBengali: nameData.nameBengali,\n      meaning: nameData.meaning,\n      meaningBengali: nameData.meaningBengali,\n      origin: nameData.origin,\n      gender: nameData.gender,\n      category: nameData.category || null\n    }));\n\n    names.forEach(name => {\n      this.islamicNames.set(name.id, name);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      location: insertUser.location || null,\n      latitude: insertUser.latitude || null,\n      longitude: insertUser.longitude || null,\n      calculationMethod: insertUser.calculationMethod || \"ISNA\",\n      dhikrCount: 0,\n      favoriteVerses: [],\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, userUpdate: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...userUpdate };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getPrayerTimes(latitude: number, longitude: number, date: string): Promise<PrayerTimes | undefined> {\n    const key = `${latitude}-${longitude}-${date}`;\n    return Array.from(this.prayerTimes.values()).find(\n      pt => pt.latitude === latitude && pt.longitude === longitude && pt.date === date\n    );\n  }\n\n  async savePrayerTimes(insertPrayerTimes: InsertPrayerTimes): Promise<PrayerTimes> {\n    const id = randomUUID();\n    const prayerTimes: PrayerTimes = { \n      ...insertPrayerTimes, \n      id,\n      userId: insertPrayerTimes.userId || null\n    };\n    this.prayerTimes.set(id, prayerTimes);\n    return prayerTimes;\n  }\n\n  async getQuranVerse(surahNumber: number, verseNumber: number): Promise<QuranVerse | undefined> {\n    return Array.from(this.quranVerses.values()).find(\n      verse => verse.surahNumber === surahNumber && verse.verseNumber === verseNumber\n    );\n  }\n\n  async getRandomQuranVerse(): Promise<QuranVerse | undefined> {\n    const verses = Array.from(this.quranVerses.values());\n    if (verses.length === 0) return undefined;\n    \n    const today = new Date();\n    const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 1000 / 60 / 60 / 24);\n    const verseIndex = dayOfYear % verses.length;\n    \n    return verses[verseIndex];\n  }\n\n  async searchQuranVerses(query: string): Promise<QuranVerse[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.quranVerses.values()).filter(verse =>\n      verse.translation.toLowerCase().includes(searchTerm) ||\n      verse.surahName.toLowerCase().includes(searchTerm) ||\n      verse.transliteration?.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  async getIslamicEvents(): Promise<IslamicEvent[]> {\n    return Array.from(this.islamicEvents.values());\n  }\n\n  async getIslamicNames(gender?: string, category?: string): Promise<IslamicName[]> {\n    let names = Array.from(this.islamicNames.values());\n    \n    if (gender && gender !== 'all') {\n      names = names.filter(name => name.gender === gender);\n    }\n    \n    if (category && category !== 'All') {\n      names = names.filter(name => name.category === category);\n    }\n    \n    return names;\n  }\n\n  async searchIslamicNames(query: string, gender?: string): Promise<IslamicName[]> {\n    const searchTerm = query.toLowerCase();\n    let names = Array.from(this.islamicNames.values()).filter(name =>\n      name.name.toLowerCase().includes(searchTerm) ||\n      name.meaning.toLowerCase().includes(searchTerm) ||\n      name.origin.toLowerCase().includes(searchTerm) ||\n      name.category?.toLowerCase().includes(searchTerm)\n    );\n\n    if (gender && gender !== 'all') {\n      names = names.filter(name => name.gender === gender);\n    }\n\n    return names;\n  }\n\n  async getIslamicNameById(id: string): Promise<IslamicName | undefined> {\n    return this.islamicNames.get(id);\n  }\n\n  async getDailyQuiz(): Promise<DailyQuiz | undefined> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    if (this.currentQuizDate === today && this.dailyQuizzes.size > 0) {\n      return Array.from(this.dailyQuizzes.values())[0];\n    }\n    \n    return undefined;\n  }\n\n  async saveDailyQuiz(insertQuiz: InsertDailyQuiz): Promise<DailyQuiz> {\n    const id = randomUUID();\n    const quiz: DailyQuiz = { ...insertQuiz, id };\n    \n    this.dailyQuizzes.clear();\n    this.dailyQuizzes.set(id, quiz);\n    this.currentQuizDate = new Date().toISOString().split('T')[0];\n    \n    return quiz;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9282},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n    \n    // Skip API routes - let them be handled by Express routes\n    if (url.startsWith('/api/')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2393},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  location: text(\"location\"),\n  latitude: real(\"latitude\"),\n  longitude: real(\"longitude\"),\n  calculationMethod: text(\"calculation_method\").default(\"ISNA\"),\n  dhikrCount: integer(\"dhikr_count\").default(0),\n  favoriteVerses: text(\"favorite_verses\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const prayerTimes = pgTable(\"prayer_times\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  date: text(\"date\").notNull(),\n  fajr: text(\"fajr\").notNull(),\n  sunrise: text(\"sunrise\").notNull(),\n  dhuhr: text(\"dhuhr\").notNull(),\n  asr: text(\"asr\").notNull(),\n  maghrib: text(\"maghrib\").notNull(),\n  isha: text(\"isha\").notNull(),\n  latitude: real(\"latitude\").notNull(),\n  longitude: real(\"longitude\").notNull(),\n  calculationMethod: text(\"calculation_method\").notNull(),\n});\n\nexport const quranVerses = pgTable(\"quran_verses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  surahNumber: integer(\"surah_number\").notNull(),\n  verseNumber: integer(\"verse_number\").notNull(),\n  arabic: text(\"arabic\").notNull(),\n  translation: text(\"translation\").notNull(),\n  translationBengali: text(\"translation_bengali\"),\n  transliteration: text(\"transliteration\"),\n  surahName: text(\"surah_name\").notNull(),\n  surahNameBengali: text(\"surah_name_bengali\"),\n  aiInsight: text(\"ai_insight\"),\n  aiInsightBengali: text(\"ai_insight_bengali\"),\n});\n\nexport const islamicEvents = pgTable(\"islamic_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hijriDate: text(\"hijri_date\").notNull(),\n  gregorianDate: text(\"gregorian_date\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  isImportant: boolean(\"is_important\").default(false),\n});\n\nexport const islamicNames = pgTable(\"islamic_names\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // English name\n  nameArabic: text(\"name_arabic\").notNull(), // Arabic script\n  nameBengali: text(\"name_bengali\").notNull(), // Bengali script\n  meaning: text(\"meaning\").notNull(),\n  meaningBengali: text(\"meaning_bengali\").notNull(), // Bengali meaning\n  origin: text(\"origin\").notNull(),\n  gender: text(\"gender\").notNull(), // 'boy' | 'girl'\n  category: text(\"category\"),\n});\n\nexport const dailyQuizzes = pgTable(\"daily_quizzes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  questionBengali: text(\"question_bengali\").notNull(),\n  options: text(\"options\").array().notNull(),\n  optionsBengali: text(\"options_bengali\").array().notNull(),\n  correctAnswer: integer(\"correct_answer\").notNull(),\n  explanation: text(\"explanation\").notNull(),\n  explanationBengali: text(\"explanation_bengali\").notNull(),\n  category: text(\"category\").notNull(),\n});\n\nexport const hadiths = pgTable(\"hadiths\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  arabic: text(\"arabic\").notNull(),\n  translation: text(\"translation\").notNull(),\n  translationBengali: text(\"translation_bengali\"),\n  narrator: text(\"narrator\").notNull(),\n  narratorBengali: text(\"narrator_bengali\"),\n  bookName: text(\"book_name\").notNull(),\n  bookNameBengali: text(\"book_name_bengali\"),\n  reference: text(\"reference\").notNull(),\n  aiInsight: text(\"ai_insight\"),\n  aiInsightBengali: text(\"ai_insight_bengali\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  location: true,\n  latitude: true,\n  longitude: true,\n  calculationMethod: true,\n});\n\nexport const insertPrayerTimesSchema = createInsertSchema(prayerTimes).omit({\n  id: true,\n});\n\nexport const insertQuranVerseSchema = createInsertSchema(quranVerses).omit({\n  id: true,\n});\n\nexport const insertIslamicEventSchema = createInsertSchema(islamicEvents).omit({\n  id: true,\n});\n\nexport const insertIslamicNameSchema = createInsertSchema(islamicNames).omit({\n  id: true,\n});\n\nexport const insertDailyQuizSchema = createInsertSchema(dailyQuizzes).omit({\n  id: true,\n});\n\nexport const insertHadithSchema = createInsertSchema(hadiths).omit({\n  id: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type PrayerTimes = typeof prayerTimes.$inferSelect;\nexport type InsertPrayerTimes = z.infer<typeof insertPrayerTimesSchema>;\nexport type QuranVerse = typeof quranVerses.$inferSelect;\nexport type InsertQuranVerse = z.infer<typeof insertQuranVerseSchema>;\nexport type IslamicEvent = typeof islamicEvents.$inferSelect;\nexport type InsertIslamicEvent = z.infer<typeof insertIslamicEventSchema>;\nexport type IslamicName = typeof islamicNames.$inferSelect;\nexport type InsertIslamicName = z.infer<typeof insertIslamicNameSchema>;\nexport type DailyQuiz = typeof dailyQuizzes.$inferSelect;\nexport type InsertDailyQuiz = z.infer<typeof insertDailyQuizSchema>;\nexport type Hadith = typeof hadiths.$inferSelect;\nexport type InsertHadith = z.infer<typeof insertHadithSchema>;\n\n// Raw interface for names before Bengali translation is applied\nexport interface RawIslamicName {\n  id?: string;\n  name: string;\n  nameArabic: string;\n  nameBengali: string;\n  meaning: string;\n  meaningBengali?: string;\n  origin: string;\n  gender: \"boy\" | \"girl\" | \"unisex\";\n  category: string;\n}\n","size_bytes":5723},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport HomePage from \"@/pages/home\";\nimport DuaPage from \"@/pages/dua\";\nimport SurahPage from \"@/pages/surah\";\nimport QiblaPage from \"@/pages/qibla\";\nimport QuranPage from \"@/pages/quran\";\nimport NamesPage from \"@/pages/names\";\nimport CalendarPage from \"@/pages/calendar\";\nimport SettingsPage from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/dua\" component={DuaPage} />\n      <Route path=\"/surah\" component={SurahPage} />\n      <Route path=\"/qibla\" component={QiblaPage} />\n      <Route path=\"/quran\" component={QuranPage} />\n      <Route path=\"/names\" component={NamesPage} />\n      <Route path=\"/calendar\" component={CalendarPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"h-full max-w-md mx-auto bg-card shadow-xl islamic-pattern\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1463},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n/* Using Noto Sans Bengali from Google Fonts for Bengali text */\n@font-face {\n  font-family: 'Nikosh';\n  src: local('Noto Sans Bengali'), local('NotoSansBengali');\n  font-display: swap;\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(46 100% 99%);\n  --foreground: hsl(220 13% 13%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(220 13% 13%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(220 13% 13%);\n  --primary: hsl(220 70% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(158 64% 38%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(43 89% 60%);\n  --accent-foreground: hsl(220 13% 13%);\n  --destructive: hsl(356 90% 54%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(200 24% 97%);\n  --ring: hsl(220 70% 50%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(158 64% 38%);\n  --chart-3: hsl(43 89% 60%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(220 13% 13%);\n  --sidebar-primary: hsl(220 70% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(220 13% 13%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(220 70% 50%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 70% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 70% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 70% 50% / 0.00), 0px 1px 2px -1px hsl(220 70% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 70% 50% / 0.00), 0px 1px 2px -1px hsl(220 70% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 70% 50% / 0.00), 0px 2px 4px -1px hsl(220 70% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 70% 50% / 0.00), 0px 4px 6px -1px hsl(220 70% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 70% 50% / 0.00), 0px 8px 10px -1px hsl(220 70% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 70% 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(220 13% 9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(220 13% 13%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(220 13% 13%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(220 70% 60%);\n  --primary-foreground: hsl(220 13% 9%);\n  --secondary: hsl(158 64% 45%);\n  --secondary-foreground: hsl(220 13% 9%);\n  --muted: hsl(220 13% 16%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(43 89% 70%);\n  --accent-foreground: hsl(220 13% 9%);\n  --destructive: hsl(356 90% 54%);\n  --destructive-foreground: hsl(220 13% 9%);\n  --border: hsl(220 13% 20%);\n  --input: hsl(220 13% 16%);\n  --ring: hsl(220 70% 60%);\n  --chart-1: hsl(220 70% 60%);\n  --chart-2: hsl(158 64% 45%);\n  --chart-3: hsl(43 89% 70%);\n  --chart-4: hsl(147 79% 47%);\n  --chart-5: hsl(341 75% 56%);\n  --sidebar: hsl(220 13% 13%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(220 70% 60%);\n  --sidebar-primary-foreground: hsl(220 13% 9%);\n  --sidebar-accent: hsl(220 13% 16%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(220 13% 20%);\n  --sidebar-ring: hsl(220 70% 60%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 70% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 70% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 70% 60% / 0.00), 0px 1px 2px -1px hsl(220 70% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 70% 60% / 0.00), 0px 1px 2px -1px hsl(220 70% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 70% 60% / 0.00), 0px 2px 4px -1px hsl(220 70% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 70% 60% / 0.00), 0px 4px 6px -1px hsl(220 70% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 70% 60% / 0.00), 0px 8px 10px -1px hsl(220 70% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 70% 60% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.prayer-status-next {\n  background: linear-gradient(135deg, hsl(43 89% 60%) 0%, hsl(43 89% 65%) 100%);\n}\n\n.prayer-status-current {\n  background: linear-gradient(135deg, hsl(158 64% 38%) 0%, hsl(158 64% 45%) 100%);\n}\n\n.compass-needle {\n  transform-origin: center;\n  transition: transform 0.3s ease-in-out;\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.islamic-pattern {\n  background-image: radial-gradient(circle at 25% 25%, hsl(220 70% 50% / 0.03) 0%, transparent 50%),\n                  radial-gradient(circle at 75% 75%, hsl(158 64% 38% / 0.03) 0%, transparent 50%);\n}\n","size_bytes":5131},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/service-worker.js')\n    .then(() => console.log('Service Worker registered'))\n    .catch(err => console.log('Service Worker registration failed:', err));\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":387},"client/src/components/asma-ul-husna.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight, Star } from \"lucide-react\";\nimport { asmaUlHusna } from \"../data/asma-ul-husna\";\n\nexport default function AsmaUlHusna() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const currentName = asmaUlHusna[currentIndex];\n\n  const previousName = () => {\n    setCurrentIndex(prev => prev > 0 ? prev - 1 : asmaUlHusna.length - 1);\n  };\n\n  const nextName = () => {\n    setCurrentIndex(prev => prev < asmaUlHusna.length - 1 ? prev + 1 : 0);\n  };\n\n  const viewAllNames = () => {\n    // For now, we'll just cycle through names\n    // In a full implementation, this would navigate to a dedicated page\n    nextName();\n  };\n\n  return (\n    <section className=\"p-4 pb-6\" data-testid=\"section-asma-ul-husna\">\n      <h2 className=\"text-xl font-black mb-4 flex items-center text-amber-400\">\n        <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg mr-3\">\n          <Star className=\"text-emerald-950 w-5 h-5\" />\n        </div>\n        Asma ul Husna\n      </h2>\n      \n      <div className=\"bg-gradient-to-br from-[#0E3B1A] to-[#0A2E14] rounded-2xl p-7 text-center border border-amber-400/20 shadow-[0_8px_24px_rgba(0,0,0,0.3)] hover:shadow-[0_12px_32px_rgba(251,191,36,0.15)] transition-all duration-300\">\n        <div \n          className=\"text-5xl font-bold mb-4 text-amber-400 drop-shadow-[0_2px_8px_rgba(251,191,36,0.3)]\" \n          style={{ fontFamily: \"'Noto Naskh Arabic', serif\" }}\n          data-testid=\"text-name-arabic\"\n        >\n          {currentName.arabic}\n        </div>\n        <div className=\"text-2xl font-bold mb-3 text-white\" data-testid=\"text-name-transliteration\">\n          {currentName.transliteration}\n        </div>\n        <div className=\"text-base text-emerald-200 mb-6 font-semibold\" data-testid=\"text-name-meaning\">\n          {currentName.meaning}\n        </div>\n        \n        <div className=\"flex justify-center items-center gap-4 mb-6\">\n          <Button \n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-12 h-12 rounded-full bg-amber-400/20 hover:bg-amber-400/30 text-amber-400 hover:scale-110 transition-all duration-300\"\n            onClick={previousName}\n            data-testid=\"button-previous-name\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          <span className=\"px-5 py-2.5 bg-gradient-to-r from-amber-500 to-amber-600 rounded-full text-sm font-black text-emerald-950 shadow-lg\" data-testid=\"text-name-number\">\n            {currentIndex + 1} / {asmaUlHusna.length}\n          </span>\n          <Button \n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-12 h-12 rounded-full bg-amber-400/20 hover:bg-amber-400/30 text-amber-400 hover:scale-110 transition-all duration-300\"\n            onClick={nextName}\n            data-testid=\"button-next-name\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n        \n        <Button \n          className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white py-3 rounded-xl font-black shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02]\"\n          onClick={viewAllNames}\n          data-testid=\"button-view-all-names\"\n        >\n          View All 99 Names\n        </Button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3493},"client/src/components/bottom-navigation.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home, Compass, BookOpen, Calendar, Baby, Book, BookMarked } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface BottomNavigationProps {\n  currentPage: \"home\" | \"qibla\" | \"quran\" | \"calendar\" | \"names\" | \"dua\" | \"surah\";\n}\n\nexport default function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [, setLocation] = useLocation();\n\n  const navigationItems = [\n    { id: \"home\", icon: Home, label: \"Home\", path: \"/\" },\n    { id: \"dua\", icon: Book, label: \"Dua\", path: \"/dua\" },\n    { id: \"surah\", icon: BookMarked, label: \"Surah\", path: \"/surah\" },\n    { id: \"qibla\", icon: Compass, label: \"Qibla\", path: \"/qibla\" },\n    { id: \"quran\", icon: BookOpen, label: \"Quran\", path: \"/quran\" },\n    { id: \"names\", icon: Baby, label: \"Names\", path: \"/names\" },\n    { id: \"calendar\", icon: Calendar, label: \"Calendar\", path: \"/calendar\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-gradient-to-t from-emerald-950 via-emerald-900 to-emerald-900/95 backdrop-blur-xl border-t border-emerald-700/50 shadow-2xl z-50\" data-testid=\"bottom-navigation\">\n      <div className=\"max-w-2xl mx-auto px-2 py-1.5\">\n        <div className=\"flex justify-around items-center\">\n          {navigationItems.map((item) => {\n            const IconComponent = item.icon;\n            const isActive = currentPage === item.id;\n            \n            return (\n              <Button\n                key={item.id}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`flex flex-col items-center gap-1 p-2 min-w-[60px] transition-all duration-300 ${\n                  isActive \n                    ? \"text-amber-400 scale-110\" \n                    : \"text-emerald-300 hover:text-amber-300 hover:scale-105\"\n                }`}\n                onClick={() => setLocation(item.path)}\n                data-testid={`nav-${item.id}`}\n              >\n                <div className={`relative ${isActive ? 'animate-pulse' : ''}`}>\n                  <IconComponent className={`h-6 w-6 transition-transform duration-300 ${isActive ? 'drop-shadow-[0_0_8px_rgba(251,191,36,0.5)]' : ''}`} />\n                  {isActive && (\n                    <div className=\"absolute -bottom-1 left-1/2 -translate-x-1/2 w-1 h-1 bg-amber-400 rounded-full\"></div>\n                  )}\n                </div>\n                <span className={`text-[10px] font-semibold ${isActive ? 'text-amber-400' : 'text-emerald-200'}`}>{item.label}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2624},"client/src/components/dhikr-counter.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Hand, RotateCcw } from \"lucide-react\";\n\nexport default function DhikrCounter() {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(prev => prev + 1);\n  };\n\n  const resetCount = () => {\n    setCount(0);\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-[#0E3B1A] to-[#0A2E14] rounded-2xl p-5 text-center border border-amber-400/20 shadow-[0_8px_24px_rgba(0,0,0,0.3)] hover:shadow-[0_12px_32px_rgba(251,191,36,0.15)] transition-all duration-300\" data-testid=\"dhikr-counter\">\n      <div className=\"w-12 h-12 mx-auto mb-3 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n        <Hand className=\"text-xl text-emerald-950\" />\n      </div>\n      <h3 className=\"font-black text-amber-400 mb-3 text-base\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>Dhikr Counter</h3>\n      <div className=\"text-5xl font-black text-amber-400 mb-4 tracking-tight drop-shadow-[0_2px_8px_rgba(251,191,36,0.3)]\" data-testid=\"text-dhikr-count\">\n        {count}\n      </div>\n      <Button \n        className=\"w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-emerald-950 py-3 rounded-xl font-black shadow-lg hover:shadow-xl transition-all duration-300 mb-2 hover:scale-105\"\n        onClick={incrementCount}\n        data-testid=\"button-increment-dhikr\"\n      >\n        Tap to Count\n      </Button>\n      <Button \n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"w-full text-xs text-emerald-300 hover:text-amber-400 transition-colors duration-300\"\n        onClick={resetCount}\n        data-testid=\"button-reset-dhikr\"\n      >\n        <RotateCcw className=\"mr-1 h-3 w-3\" />\n        Reset\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1858},"client/src/components/islamic-calendar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"lucide-react\";\nimport { getHijriDate } from \"@/lib/islamic-calendar\";\nimport { useLocation } from \"wouter\";\n\nexport default function IslamicCalendar() {\n  const [, setLocation] = useLocation();\n  const today = new Date();\n  const hijriDate = getHijriDate(today);\n  const [day, monthYear] = hijriDate.split(' ', 2);\n\n  const viewCalendar = () => {\n    setLocation(\"/calendar\");\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-[#0E3B1A] to-[#0A2E14] rounded-2xl p-5 text-center border border-amber-400/20 shadow-[0_8px_24px_rgba(0,0,0,0.3)] hover:shadow-[0_12px_32px_rgba(251,191,36,0.15)] transition-all duration-300\" data-testid=\"islamic-calendar\">\n      <div className=\"w-12 h-12 mx-auto mb-3 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n        <Calendar className=\"text-xl text-emerald-950\" />\n      </div>\n      <h3 className=\"font-black text-amber-400 mb-3 text-base\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>Islamic Calendar</h3>\n      <div className=\"text-5xl font-black text-amber-400 mb-2 tracking-tight drop-shadow-[0_2px_8px_rgba(251,191,36,0.3)]\" data-testid=\"text-hijri-day\">\n        {day}\n      </div>\n      <div className=\"text-sm text-emerald-200 mb-4 font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }} data-testid=\"text-hijri-month-year\">\n        {monthYear}\n      </div>\n      <Button \n        className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-3 rounded-xl font-black shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n        onClick={viewCalendar}\n        data-testid=\"button-view-calendar\"\n      >\n        View Calendar\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1847},"client/src/components/prayer-times.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Clock, Sun, Moon, Star } from \"lucide-react\";\nimport { calculateNextPrayer, formatTimeRemaining } from \"@/lib/prayer-times\";\nimport type { PrayerTimes as PrayerTimesType } from \"@shared/schema\";\n\ninterface PrayerTimesProps {\n  latitude: number;\n  longitude: number;\n}\n\nexport default function PrayerTimes({ latitude, longitude }: PrayerTimesProps) {\n  const today = new Date().toISOString().split('T')[0];\n  \n  const { data: prayerTimes, isLoading } = useQuery<PrayerTimesType>({\n    queryKey: [\"/api/prayer-times\", { latitude, longitude, date: today }],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"animate-pulse space-y-3\">\n          <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n          <div className=\"h-16 bg-muted rounded\"></div>\n          <div className=\"h-16 bg-muted rounded\"></div>\n        </div>\n      </section>\n    );\n  }\n\n  if (!prayerTimes) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"text-center text-muted-foreground\">\n          Unable to load prayer times\n        </div>\n      </section>\n    );\n  }\n\n  const prayers = [\n    { name: \"Fajr\", time: prayerTimes.fajr, icon: Star },\n    { name: \"Sunrise\", time: prayerTimes.sunrise, icon: Sun },\n    { name: \"Dhuhr\", time: prayerTimes.dhuhr, icon: Sun },\n    { name: \"Asr\", time: prayerTimes.asr, icon: Sun },\n    { name: \"Maghrib\", time: prayerTimes.maghrib, icon: Moon },\n    { name: \"Isha\", time: prayerTimes.isha, icon: Star },\n  ];\n\n  const { nextPrayer, currentPrayer, timeRemaining } = calculateNextPrayer(prayers);\n\n  return (\n    <section className=\"p-4\" data-testid=\"section-prayer-times\">\n      <div className=\"mb-4\">\n        <h2 className=\"text-lg font-semibold mb-2 flex items-center\">\n          <Clock className=\"mr-2 text-primary\" />\n          Prayer Times\n        </h2>\n        {nextPrayer && (\n          <div className=\"text-sm text-muted-foreground mb-3\">\n            Next: <span className=\"font-medium text-foreground\" data-testid=\"text-next-prayer\">{nextPrayer.name}</span> \n            in <span className=\"font-medium text-accent\" data-testid=\"text-time-remaining\">{formatTimeRemaining(timeRemaining)}</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-3\">\n        {prayers.map((prayer) => {\n          const isCurrent = currentPrayer?.name === prayer.name;\n          const isNext = nextPrayer?.name === prayer.name;\n          const IconComponent = prayer.icon;\n          \n          return (\n            <Card \n              key={prayer.name} \n              className={`p-4 ${\n                isCurrent \n                  ? \"prayer-status-current\" \n                  : isNext \n                  ? \"prayer-status-next\" \n                  : \"bg-muted\"\n              }`}\n              data-testid={`card-prayer-${prayer.name.toLowerCase()}`}\n            >\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center\">\n                  <IconComponent \n                    className={`mr-3 text-lg ${\n                      isCurrent || isNext ? \"text-white\" : \"text-muted-foreground\"\n                    }`} \n                  />\n                  <div>\n                    <h3 className={`font-semibold ${\n                      isCurrent || isNext ? \"text-white\" : \"\"\n                    }`}>\n                      {prayer.name}\n                    </h3>\n                    {(isCurrent || isNext) && (\n                      <p className=\"text-xs text-white/80\">\n                        {isCurrent ? \"Current Prayer\" : \"Next Prayer\"}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`text-lg font-bold ${\n                    isCurrent || isNext ? \"text-white\" : \"\"\n                  }`} data-testid={`text-prayer-time-${prayer.name.toLowerCase()}`}>\n                    {prayer.time}\n                  </p>\n                  {isCurrent && (\n                    <p className=\"text-xs text-white/80\">Started</p>\n                  )}\n                  {isNext && (\n                    <p className=\"text-xs text-white/80\">\n                      in {formatTimeRemaining(timeRemaining)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4530},"client/src/components/qibla-compass.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Compass, RotateCcw } from \"lucide-react\";\n\ninterface QiblaCompassProps {\n  latitude: number;\n  longitude: number;\n  standalone?: boolean;\n}\n\ninterface QiblaData {\n  direction: number;\n  distance: number;\n  compassDirection: string;\n}\n\nexport default function QiblaCompass({ latitude, longitude, standalone = false }: QiblaCompassProps) {\n  const [deviceHeading, setDeviceHeading] = useState(0);\n  const [calibrated, setCalibrated] = useState(false);\n\n  const { data: qiblaData, isLoading } = useQuery<QiblaData>({\n    queryKey: [\"/api/qibla\", { latitude, longitude }],\n  });\n\n  useEffect(() => {\n    if ('DeviceOrientationEvent' in window) {\n      const handleOrientation = (event: DeviceOrientationEvent) => {\n        if (event.alpha !== null) {\n          setDeviceHeading(event.alpha);\n        }\n      };\n\n      window.addEventListener('deviceorientation', handleOrientation);\n      return () => window.removeEventListener('deviceorientation', handleOrientation);\n    }\n  }, []);\n\n  const calibrateCompass = () => {\n    setCalibrated(true);\n    // Reset device heading for calibration\n    setDeviceHeading(0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`${standalone ? '' : 'p-4 border-t border-border'}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-40 bg-muted rounded-xl mx-auto w-40\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!qiblaData) {\n    return (\n      <div className={`${standalone ? '' : 'p-4 border-t border-border'}`}>\n        <div className=\"text-center text-muted-foreground\">\n          Unable to calculate Qibla direction\n        </div>\n      </div>\n    );\n  }\n\n  const needleRotation = qiblaData.direction - deviceHeading;\n\n  return (\n    <section className={`${standalone ? '' : 'p-4 border-t border-border'}`} data-testid=\"section-qibla\">\n      {!standalone && (\n        <h2 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <Compass className=\"mr-2 text-secondary\" />\n          Qibla Direction\n        </h2>\n      )}\n      \n      <div className=\"bg-gradient-to-br from-secondary/10 to-primary/10 rounded-xl p-6 text-center\">\n        <div className=\"relative w-40 h-40 mx-auto mb-4\" data-testid=\"compass-container\">\n          {/* Compass Background */}\n          <div className=\"absolute inset-0 rounded-full border-4 border-border bg-card shadow-lg\">\n            {/* Compass Markings */}\n            <div className=\"absolute inset-2 rounded-full border border-border/50\">\n              {/* Cardinal Directions */}\n              <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 text-xs font-semibold text-muted-foreground\">N</div>\n              <div className=\"absolute top-1/2 -right-2 transform -translate-y-1/2 text-xs font-semibold text-muted-foreground\">E</div>\n              <div className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-semibold text-muted-foreground\">S</div>\n              <div className=\"absolute top-1/2 -left-2 transform -translate-y-1/2 text-xs font-semibold text-muted-foreground\">W</div>\n            </div>\n          </div>\n          \n          {/* Compass Needle */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div \n              className=\"compass-needle\" \n              style={{ transform: `rotate(${needleRotation}deg)` }}\n              data-testid=\"compass-needle\"\n            >\n              <div className=\"w-1 h-16 bg-gradient-to-t from-red-500 to-green-500 rounded-full shadow-lg relative\">\n                <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-green-500 rounded-full border-2 border-white shadow-md\"></div>\n                <div className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-red-500 rounded-full border-2 border-white shadow-md\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-qibla-direction\">\n            {qiblaData.direction}° {qiblaData.compassDirection}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Distance to Kaaba: <span className=\"font-medium\" data-testid=\"text-qibla-distance\">{qiblaData.distance.toLocaleString()} km</span>\n          </p>\n          <Button \n            onClick={calibrateCompass}\n            className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n            data-testid=\"button-calibrate\"\n          >\n            <RotateCcw className=\"mr-1 h-4 w-4\" />\n            Calibrate\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4893},"client/src/components/quran-verse.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, Share, RefreshCw } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport type { QuranVerse as QuranVerseType } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function QuranVerse() {\n  const [, setLocation] = useLocation();\n  \n  const getMillisecondsUntilMidnight = () => {\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    return tomorrow.getTime() - now.getTime();\n  };\n  \n  const { data: verse, isLoading } = useQuery<QuranVerseType>({\n    queryKey: [\"/api/quran/random\"],\n    staleTime: getMillisecondsUntilMidnight(),\n  });\n\n  const shareVerse = () => {\n    if (verse && navigator.share) {\n      navigator.share({\n        title: `Quran ${verse.surahName} ${verse.surahNumber}:${verse.verseNumber}`,\n        text: `${verse.arabic}\\n\\n\"${verse.translation}\"\\n\\n- Quran ${verse.surahNumber}:${verse.verseNumber}`,\n      });\n    }\n  };\n\n  const browseQuran = () => {\n    setLocation(\"/quran\");\n  };\n\n  const refreshVerse = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/quran/random\"] });\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-emerald-800/30 rounded w-1/3\"></div>\n          <div className=\"h-32 bg-emerald-800/30 rounded-2xl\"></div>\n        </div>\n      </section>\n    );\n  }\n\n  if (!verse) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"text-center text-emerald-300\">\n          Unable to load verse\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"p-4\" data-testid=\"section-quran-verse\">\n      <h2 className=\"text-xl font-black mb-4 flex items-center justify-between text-amber-400\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg mr-3\">\n            <BookOpen className=\"text-emerald-950 w-5 h-5\" />\n          </div>\n          Verse of the Day\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={refreshVerse}\n          className=\"text-amber-400 hover:text-amber-300 hover:bg-emerald-800/30\"\n          data-testid=\"button-refresh-verse\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n        </Button>\n      </h2>\n      \n      <div className=\"bg-gradient-to-br from-[#0E3B1A] to-[#0A2E14] rounded-2xl p-6 border border-amber-400/20 shadow-[0_8px_24px_rgba(0,0,0,0.3)] hover:shadow-[0_12px_32px_rgba(251,191,36,0.15)] transition-all duration-300 mb-4\">\n        <div className=\"bg-gradient-to-b from-amber-400/5 to-transparent rounded-xl p-6 mb-6 border border-amber-400/10\">\n          <div \n            className=\"text-center text-4xl font-bold leading-loose text-white mb-6\" \n            style={{ \n              fontFamily: \"'Noto Naskh Arabic', serif\", \n              direction: 'rtl',\n              lineHeight: '2.2',\n              textShadow: '0 2px 12px rgba(251,191,36,0.2)'\n            }}\n            data-testid=\"text-verse-arabic\"\n          >\n            {verse.arabic}\n          </div>\n          \n          <div className=\"h-px bg-gradient-to-r from-transparent via-amber-400/40 to-transparent my-6\"></div>\n          \n          {verse.translationBengali && verse.translationBengali !== verse.translation && (\n            <div \n              className=\"text-xl text-amber-100 text-center leading-loose font-bold mb-4 px-4 py-3\" \n              style={{ \n                fontFamily: \"'Noto Sans Bengali', 'Nikosh', 'Kalpurush', sans-serif\",\n                lineHeight: '2',\n                letterSpacing: '0.02em'\n              }} \n              data-testid=\"text-verse-translation-bengali\"\n            >\n              {verse.translationBengali}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"text-base text-emerald-100 text-center leading-relaxed italic px-2\" data-testid=\"text-verse-translation\">\n          \"{verse.translation}\"\n        </div>\n        \n        {verse.aiInsightBengali && (\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-amber-400/10 to-amber-400/5 rounded-xl border border-amber-400/20\">\n            <p className=\"text-sm text-amber-300 font-bold mb-3 flex items-center gap-2\" style={{ fontFamily: \"'Noto Sans Bengali', 'Nikosh', 'Kalpurush', sans-serif\" }}>\n              <span className=\"w-1 h-4 bg-amber-400 rounded-full\"></span>\n              আজকের প্রতিফলন\n            </p>\n            <p className=\"text-base text-emerald-100 leading-relaxed\" style={{ fontFamily: \"'Noto Sans Bengali', 'Nikosh', 'Kalpurush', sans-serif\", lineHeight: '1.8' }} data-testid=\"text-verse-insight-bengali\">\n              {verse.aiInsightBengali}\n            </p>\n          </div>\n        )}\n        \n        <div className=\"flex justify-between items-center pt-3 border-t border-amber-400/20\">\n          <span className=\"text-sm font-semibold\" data-testid=\"text-verse-reference\">\n            <span className=\"text-amber-400\">{verse.surahNameBengali || verse.surahName}</span>\n            <span className=\"text-emerald-300 mx-1\">•</span>\n            <span className=\"text-emerald-300\">{verse.surahNumber}:{verse.verseNumber}</span>\n          </span>\n          <Button \n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={shareVerse}\n            className=\"text-emerald-300 hover:text-amber-400 transition-colors duration-300\"\n            data-testid=\"button-share-verse\"\n          >\n            <Share className=\"mr-1 h-4 w-4\" />\n            Share\n          </Button>\n        </div>\n      </div>\n      \n      <Button \n        className=\"w-full bg-gradient-to-r from-emerald-700 to-emerald-800 hover:from-emerald-800 hover:to-emerald-900 text-white py-3 rounded-xl font-black shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02]\"\n        onClick={browseQuran}\n        data-testid=\"button-browse-quran\"\n      >\n        <BookOpen className=\"mr-2 h-5 w-5\" />\n        Browse Quran\n      </Button>\n    </section>\n  );\n}\n","size_bytes":6272},"client/src/data/asma-ul-husna.ts":{"content":"export const asmaUlHusna = [\n  { arabic: \"الرَّحْمَنُ\", transliteration: \"Ar-Rahman\", meaning: \"The Most Merciful\" },\n  { arabic: \"الرَّحِيمُ\", transliteration: \"Ar-Raheem\", meaning: \"The Most Compassionate\" },\n  { arabic: \"الْمَلِكُ\", transliteration: \"Al-Malik\", meaning: \"The King\" },\n  { arabic: \"الْقُدُّوسُ\", transliteration: \"Al-Quddus\", meaning: \"The Most Sacred\" },\n  { arabic: \"السَّلاَمُ\", transliteration: \"As-Salaam\", meaning: \"The Source of Peace\" },\n  { arabic: \"الْمُؤْمِنُ\", transliteration: \"Al-Mu'min\", meaning: \"The Guardian of Faith\" },\n  { arabic: \"الْمُهَيْمِنُ\", transliteration: \"Al-Muhaymin\", meaning: \"The Protector\" },\n  { arabic: \"الْعَزِيزُ\", transliteration: \"Al-Aziz\", meaning: \"The Mighty\" },\n  { arabic: \"الْجَبَّارُ\", transliteration: \"Al-Jabbar\", meaning: \"The Compeller\" },\n  { arabic: \"الْمُتَكَبِّرُ\", transliteration: \"Al-Mutakabbir\", meaning: \"The Majestic\" },\n  { arabic: \"الْخَالِقُ\", transliteration: \"Al-Khaliq\", meaning: \"The Creator\" },\n  { arabic: \"الْبَارِئُ\", transliteration: \"Al-Bari\", meaning: \"The Originator\" },\n  { arabic: \"الْمُصَوِّرُ\", transliteration: \"Al-Musawwir\", meaning: \"The Fashioner\" },\n  { arabic: \"الْغَفَّارُ\", transliteration: \"Al-Ghaffar\", meaning: \"The Great Forgiver\" },\n  { arabic: \"الْقَهَّارُ\", transliteration: \"Al-Qahhar\", meaning: \"The Dominant\" },\n  { arabic: \"الْوَهَّابُ\", transliteration: \"Al-Wahhab\", meaning: \"The Bestower\" },\n  { arabic: \"الرَّزَّاقُ\", transliteration: \"Ar-Razzaq\", meaning: \"The Provider\" },\n  { arabic: \"الْفَتَّاحُ\", transliteration: \"Al-Fattah\", meaning: \"The Opener\" },\n  { arabic: \"اَلْعَلِيْمُ\", transliteration: \"Al-Aleem\", meaning: \"The All-Knowing\" },\n  { arabic: \"الْقَابِضُ\", transliteration: \"Al-Qabid\", meaning: \"The Constrictor\" },\n  { arabic: \"الْبَاسِطُ\", transliteration: \"Al-Basit\", meaning: \"The Expander\" },\n  { arabic: \"الْخَافِضُ\", transliteration: \"Al-Khafid\", meaning: \"The Abaser\" },\n  { arabic: \"الرَّافِعُ\", transliteration: \"Ar-Rafi\", meaning: \"The Exalter\" },\n  { arabic: \"الْمُعِزُّ\", transliteration: \"Al-Mu'izz\", meaning: \"The Honorer\" },\n  { arabic: \"الْمُذِلُّ\", transliteration: \"Al-Muzill\", meaning: \"The Humiliator\" },\n  { arabic: \"السَّمِيعُ\", transliteration: \"As-Samee\", meaning: \"The All-Hearing\" },\n  { arabic: \"الْبَصِيرُ\", transliteration: \"Al-Baseer\", meaning: \"The All-Seeing\" },\n  { arabic: \"الْحَكَمُ\", transliteration: \"Al-Hakam\", meaning: \"The Judge\" },\n  { arabic: \"الْعَدْلُ\", transliteration: \"Al-Adl\", meaning: \"The Just\" },\n  { arabic: \"اللَّطِيفُ\", transliteration: \"Al-Lateef\", meaning: \"The Gentle\" },\n  { arabic: \"الْخَبِيرُ\", transliteration: \"Al-Khabeer\", meaning: \"The All-Aware\" },\n  { arabic: \"الْحَلِيمُ\", transliteration: \"Al-Haleem\", meaning: \"The Clement\" },\n  { arabic: \"الْعَظِيمُ\", transliteration: \"Al-Azeem\", meaning: \"The Magnificent\" },\n  { arabic: \"الْغَفُورُ\", transliteration: \"Al-Ghafur\", meaning: \"The Much-Forgiving\" },\n  { arabic: \"الشَّكُورُ\", transliteration: \"Ash-Shakur\", meaning: \"The Appreciative\" },\n  { arabic: \"الْعَلِيُّ\", transliteration: \"Al-Ali\", meaning: \"The Most High\" },\n  { arabic: \"الْكَبِيرُ\", transliteration: \"Al-Kabeer\", meaning: \"The Most Great\" },\n  { arabic: \"الْحَفِيظُ\", transliteration: \"Al-Hafeedh\", meaning: \"The Preserver\" },\n  { arabic: \"الْمُقِيتُ\", transliteration: \"Al-Muqeet\", meaning: \"The Sustainer\" },\n  { arabic: \"الْحسِيبُ\", transliteration: \"Al-Haseeb\", meaning: \"The Reckoner\" },\n  { arabic: \"الْجَلِيلُ\", transliteration: \"Al-Jaleel\", meaning: \"The Majestic\" },\n  { arabic: \"الْكَرِيمُ\", transliteration: \"Al-Kareem\", meaning: \"The Generous\" },\n  { arabic: \"الرَّقِيبُ\", transliteration: \"Ar-Raqeeb\", meaning: \"The Watchful\" },\n  { arabic: \"الْمُجِيبُ\", transliteration: \"Al-Mujeeb\", meaning: \"The Responsive\" },\n  { arabic: \"الْوَاسِعُ\", transliteration: \"Al-Wasi\", meaning: \"The All-Encompassing\" },\n  { arabic: \"الْحَكِيمُ\", transliteration: \"Al-Hakeem\", meaning: \"The Wise\" },\n  { arabic: \"الْوَدُودُ\", transliteration: \"Al-Wadud\", meaning: \"The Loving\" },\n  { arabic: \"الْمَجِيدُ\", transliteration: \"Al-Majeed\", meaning: \"The Glorious\" },\n  { arabic: \"الْبَاعِثُ\", transliteration: \"Al-Ba'ith\", meaning: \"The Resurrector\" },\n  { arabic: \"الشَّهِيدُ\", transliteration: \"Ash-Shaheed\", meaning: \"The Witness\" },\n  { arabic: \"الْحَقُّ\", transliteration: \"Al-Haqq\", meaning: \"The Truth\" },\n  { arabic: \"الْوَكِيلُ\", transliteration: \"Al-Wakeel\", meaning: \"The Trustee\" },\n  { arabic: \"الْقَوِيُّ\", transliteration: \"Al-Qawiyy\", meaning: \"The Strong\" },\n  { arabic: \"الْمَتِينُ\", transliteration: \"Al-Mateen\", meaning: \"The Firm\" },\n  { arabic: \"الْوَلِيُّ\", transliteration: \"Al-Waliyy\", meaning: \"The Friend\" },\n  { arabic: \"الْحَمِيدُ\", transliteration: \"Al-Hameed\", meaning: \"The Praiseworthy\" },\n  { arabic: \"الْمُحْصِي\", transliteration: \"Al-Muhsee\", meaning: \"The Counter\" },\n  { arabic: \"الْمُبْدِئُ\", transliteration: \"Al-Mubdi\", meaning: \"The Originator\" },\n  { arabic: \"الْمُعِيدُ\", transliteration: \"Al-Mu'eed\", meaning: \"The Restorer\" },\n  { arabic: \"الْمُحْيِي\", transliteration: \"Al-Muhyee\", meaning: \"The Giver of Life\" },\n  { arabic: \"اَلْمُمِيتُ\", transliteration: \"Al-Mumeet\", meaning: \"The Destroyer\" },\n  { arabic: \"الْحَيُّ\", transliteration: \"Al-Hayy\", meaning: \"The Living\" },\n  { arabic: \"الْقَيُّومُ\", transliteration: \"Al-Qayyoom\", meaning: \"The Sustainer\" },\n  { arabic: \"الْوَاجِدُ\", transliteration: \"Al-Wajid\", meaning: \"The Finder\" },\n  { arabic: \"الْمَاجِدُ\", transliteration: \"Al-Majid\", meaning: \"The Noble\" },\n  { arabic: \"الْواحِدُ\", transliteration: \"Al-Wahid\", meaning: \"The Unique\" },\n  { arabic: \"اَلاَحَدُ\", transliteration: \"Al-Ahad\", meaning: \"The One\" },\n  { arabic: \"الصَّمَدُ\", transliteration: \"As-Samad\", meaning: \"The Eternal\" },\n  { arabic: \"الْقَادِرُ\", transliteration: \"Al-Qadir\", meaning: \"The Capable\" },\n  { arabic: \"الْمُقْتَدِرُ\", transliteration: \"Al-Muqtadir\", meaning: \"The Powerful\" },\n  { arabic: \"الْمُقَدِّمُ\", transliteration: \"Al-Muqaddim\", meaning: \"The Expediter\" },\n  { arabic: \"الْمُؤَخِّرُ\", transliteration: \"Al-Mu'akhkhir\", meaning: \"The Delayer\" },\n  { arabic: \"الأوَّلُ\", transliteration: \"Al-Awwal\", meaning: \"The First\" },\n  { arabic: \"الآخِرُ\", transliteration: \"Al-Akhir\", meaning: \"The Last\" },\n  { arabic: \"الظَّاهِرُ\", transliteration: \"Az-Zahir\", meaning: \"The Manifest\" },\n  { arabic: \"الْبَاطِنُ\", transliteration: \"Al-Batin\", meaning: \"The Hidden\" },\n  { arabic: \"الْوَالِي\", transliteration: \"Al-Walee\", meaning: \"The Governor\" },\n  { arabic: \"الْمُتَعَالِي\", transliteration: \"Al-Muta'ali\", meaning: \"The Most Exalted\" },\n  { arabic: \"الْبَرُّ\", transliteration: \"Al-Barr\", meaning: \"The Source of Goodness\" },\n  { arabic: \"التَّوَابُ\", transliteration: \"At-Tawwab\", meaning: \"The Acceptor of Repentance\" },\n  { arabic: \"الْمُنْتَقِمُ\", transliteration: \"Al-Muntaqim\", meaning: \"The Avenger\" },\n  { arabic: \"العَفُوُّ\", transliteration: \"Al-Afuww\", meaning: \"The Pardoner\" },\n  { arabic: \"الرَّؤُوفُ\", transliteration: \"Ar-Ra'uf\", meaning: \"The Compassionate\" },\n  { arabic: \"مَالِكُ الْمُلْكِ\", transliteration: \"Malik-ul-Mulk\", meaning: \"Master of the Kingdom\" },\n  { arabic: \"ذُوالْجَلاَلِ وَالإكْرَامِ\", transliteration: \"Dhul-Jalali wal-Ikram\", meaning: \"Lord of Majesty and Generosity\" },\n  { arabic: \"الْمُقْسِطُ\", transliteration: \"Al-Muqsit\", meaning: \"The Equitable\" },\n  { arabic: \"الْجَامِعُ\", transliteration: \"Al-Jami\", meaning: \"The Gatherer\" },\n  { arabic: \"الْغَنِيُّ\", transliteration: \"Al-Ghaniyy\", meaning: \"The Independent\" },\n  { arabic: \"الْمُغْنِي\", transliteration: \"Al-Mughni\", meaning: \"The Enricher\" },\n  { arabic: \"الْمَانِعُ\", transliteration: \"Al-Mani\", meaning: \"The Preventer\" },\n  { arabic: \"الضَّارَّ\", transliteration: \"Ad-Darr\", meaning: \"The Distresser\" },\n  { arabic: \"النَّافِعُ\", transliteration: \"An-Nafi\", meaning: \"The Benefiter\" },\n  { arabic: \"النُّورُ\", transliteration: \"An-Nur\", meaning: \"The Light\" },\n  { arabic: \"الْهَادِي\", transliteration: \"Al-Hadi\", meaning: \"The Guide\" },\n  { arabic: \"الْبَدِيعُ\", transliteration: \"Al-Badi\", meaning: \"The Incomparable\" },\n  { arabic: \"الْبَاقِي\", transliteration: \"Al-Baqi\", meaning: \"The Everlasting\" },\n  { arabic: \"الْوَارِثُ\", transliteration: \"Al-Warith\", meaning: \"The Inheritor\" },\n  { arabic: \"الرَّشِيدُ\", transliteration: \"Ar-Rasheed\", meaning: \"The Guide to Right Path\" },\n  { arabic: \"الصَّبُورُ\", transliteration: \"As-Sabur\", meaning: \"The Patient\" }\n];\n","size_bytes":9404},"client/src/data/duas.ts":{"content":"export interface Dua {\n  id: string;\n  titleBengali: string;\n  titleEnglish: string;\n  arabic: string;\n  transliteration: string;\n  meaningBengali: string;\n  category: string;\n}\n\nexport const duas: Dua[] = [\n  {\n    id: \"1\",\n    titleBengali: \"ইসমে আজম — রুকইয়া দোয়া\",\n    titleEnglish: \"Isme Azam - Ruqyah Dua\",\n    arabic: \"اللهم إني أسألك بأن لك الحمد، لا إله إلا أنت، وحدك لا شريك لك، المنّان، يا بديع السماوات والأرض، يا ذا الجلال والإكرام، يا حي يا قيوم\",\n    transliteration: \"আল্লাহুম্মা ইন্নি আসআলুকা বিআন্না লাকাল হামদু, লা ইলাহা ইল্লা আনতা, ওয়াহদাকা লা শারিকা লাকা, আল-মান্নান, ইয়াবাদীআস্-সামাওয়াতি ওয়াল আরদ, ইয়াযাল-জালালি ওয়াল ইকরাম, ইয়াহাইয়্যু ইয়া কাইয়্যুম\",\n    meaningBengali: \"হে আল্লাহ! আমি তোমার কাছে প্রার্থনা করছি, কারণ সমস্ত প্রশংসা তোমারই। তোমা ছাড়া কোনো উপাস্য নেই; তুমি এক, তোমার কোনো অংশীদার নেই। তুমি দাতা (আল-মান্নান), হে আকাশমণ্ডলী ও পৃথিবীর সৃষ্টিকর্তা, হে মহিমা ও সম্মানের অধিকারী, হে চিরঞ্জীব, হে চিরস্থায়ী।\",\n    category: \"রুকইয়া\"\n  },\n  {\n    id: \"2\",\n    titleBengali: \"সকালের দোয়া\",\n    titleEnglish: \"Morning Dua\",\n    arabic: \"أَصْبَحْنَا وَأَصْبَحَ الْمُلْكُ لِلَّهِ وَالْحَمْدُ لِلَّهِ\",\n    transliteration: \"আসবাহনা ওয়া আসবাহাল মুলকু লিল্লাহি ওয়াল হামদু লিল্লাহ\",\n    meaningBengali: \"আমরা সকালে উপনীত হয়েছি এবং সমস্ত রাজত্ব আল্লাহর জন্য এবং সমস্ত প্রশংসা আল্লাহর জন্য।\",\n    category: \"দৈনিক\"\n  },\n  {\n    id: \"3\",\n    titleBengali: \"সন্ধ্যার দোয়া\",\n    titleEnglish: \"Evening Dua\",\n    arabic: \"أَمْسَيْنَا وَأَمْسَى الْمُلْكُ لِلَّهِ وَالْحَمْدُ لِلَّهِ\",\n    transliteration: \"আমসাইনা ওয়া আমসাল মুলকু লিল্লাহি ওয়াল হামদু লিল্লাহ\",\n    meaningBengali: \"আমরা সন্ধ্যায় উপনীত হয়েছি এবং সমস্ত রাজত্ব আল্লাহর জন্য এবং সমস্ত প্রশংসা আল্লাহর জন্য।\",\n    category: \"দৈনিক\"\n  },\n  {\n    id: \"4\",\n    titleBengali: \"ঘুমানোর দোয়া\",\n    titleEnglish: \"Sleeping Dua\",\n    arabic: \"بِاسْمِكَ اللَّهُمَّ أَمُوتُ وَأَحْيَا\",\n    transliteration: \"বিসমিকা আল্লাহুম্মা আমূতু ওয়া আহইয়া\",\n    meaningBengali: \"হে আল্লাহ! তোমার নামে আমি মরি এবং বেঁচে থাকি।\",\n    category: \"দৈনিক\"\n  },\n  {\n    id: \"5\",\n    titleBengali: \"খাবারের পূর্বে দোয়া\",\n    titleEnglish: \"Before Eating\",\n    arabic: \"بِسْمِ اللَّهِ وَعَلَى بَرَكَةِ اللَّهِ\",\n    transliteration: \"বিসমিল্লাহি ওয়া আলা বারাকাতিল্লাহ\",\n    meaningBengali: \"আল্লাহর নামে এবং আল্লাহর বরকতের উপর (শুরু করছি)।\",\n    category: \"খাদ্য\"\n  },\n  {\n    id: \"6\",\n    titleBengali: \"খাবারের পরে দোয়া\",\n    titleEnglish: \"After Eating\",\n    arabic: \"الْحَمْدُ لِلَّهِ الَّذِي أَطْعَمَنَا وَسَقَانَا وَجَعَلَنَا مُسْلِمِينَ\",\n    transliteration: \"আলহামদুলিল্লাহিল্লাযী আতআমানা ওয়া সাকানা ওয়া জাআলানা মুসলিমীন\",\n    meaningBengali: \"সকল প্রশংসা আল্লাহর জন্য যিনি আমাদের খাওয়ালেন, পান করালেন এবং আমাদের মুসলিম বানালেন।\",\n    category: \"খাদ্য\"\n  },\n  {\n    id: \"7\",\n    titleBengali: \"সূরা ফাতিহা (৭ বার)\",\n    titleEnglish: \"Surah Al-Fatiha (7 times)\",\n    arabic: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ الرَّحْمَٰنِ الرَّحِيمِ مَالِكِ يَوْمِ الدِّينِ إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ اهْدِنَا الصِّرَاطَ الْمُسْتَقِيمَ صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ\",\n    transliteration: \"বিসমিল্লাহির রাহমানির রাহিম। আলহামদু লিল্লাহি রব্বিল 'আলামীন। আর-রাহমানির রাহিম। মালিকি ইয়াওমিদ্দীন। ইয়্যাকা না'বুদু ওয়া ইয়্যাকা নাস্তাঈন। ইহদিনাস সিরাতাল মুস্তাকীম। সিরাতাল্লাযিনা আন'আমতা 'আলাইহিম গইরিল মাগদুবি 'আলাইহিম ওয়ালাদ্দ্বাল্লীন।\",\n    meaningBengali: \"সমস্ত প্রশংসা আল্লাহর জন্য, যিনি বিশ্বজগতের প্রতিপালক। তিনি পরম দয়ালু, পরম করুণাময়। বিচার দিবসের মালিক। আমরা একমাত্র তোমারই ইবাদত করি এবং একমাত্র তোমারই সাহায্য প্রার্থনা করি। আমাদের সরল পথ প্রদর্শন কর। তাদের পথ, যাদের উপর তুমি অনুগ্রহ করেছ। তাদের পথ নয়, যারা ক্রোধের পাত্র হয়েছে এবং যারা পথভ্রষ্ট হয়েছে।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"8\",\n    titleBengali: \"আয়াতুল কুরসি (সূরা বাকারা: ২৫৫)\",\n    titleEnglish: \"Ayatul Kursi (Surah Al-Baqarah: 255)\",\n    arabic: \"اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ ۚ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ ۚ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ ۗ مَن ذَا الَّذِي يَشْفَعُ عِندَهُ إِلَّا بِإِذْنِهِ ۚ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ ۖ وَلَا يُحِيطُونَ بِشَيْءٍ مِّنْ عِلْمِهِ إِلَّا بِمَا شَاءَ ۚ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ ۖ وَلَا يَئُودُهُ حِفْظُهُمَا ۚ وَهُوَ الْعَلِيُّ الْعَظِيمُ\",\n    transliteration: \"আল্লাহু লা ইলাহা ইল্লা হুয়াল হাইয়ুল ক্বাইয়ূম। লা তা'খুযুহু সিনাতুওঁ ওয়ালা নাউম। লাহু মা ফিস সামাওয়াতি ওয়ামা ফিল আরদ। মান যাল্লাযি ইয়াশফা'উ 'ইনদাহু ইল্লা বিইযনিহি। ইয়া'লামু মা বাইনা আইদিহিম ওয়ামা খালফাহুম। ওয়ালা ইউহিতুনা বিশাইয়িম মিন 'ইলমিহি ইল্লা বিমা শা'আ। ওয়াসি'আ কুরসিইয়্যুহুস সামাওয়াতি ওয়াল আরদ। ওয়ালা ইয়াউদুহু হিফযুহুমা। ওয়া হুয়াল আলিইয়্যুল আজীম।\",\n    meaningBengali: \"আল্লাহ ছাড়া কোনো উপাস্য নেই। তিনি চিরঞ্জীব, সর্বদা প্রতিষ্ঠিত। তাঁকে তন্দ্রা ও নিদ্রা গ্রাস করে না। আকাশ ও পৃথিবীতে যা কিছু আছে সব তাঁরই। তাঁর অনুমতি ছাড়া এমন কে আছে যে তাঁর কাছে সুপারিশ করতে পারে? তিনি জানেন যা তাদের সামনে আছে এবং যা তাদের পেছনে আছে। তাঁর জ্ঞানের কিছুই তারা আয়ত্ত করতে পারে না, তিনি যা ইচ্ছা করেন তা ব্যতীত। তাঁর কুরসি আকাশমণ্ডলী ও পৃথিবীকে পরিবেষ্টন করে আছে। এ দুটির রক্ষণাবেক্ষণ তাঁকে ক্লান্ত করে না। তিনি মহীয়ান, মহান।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"9\",\n    titleBengali: \"সূরা ইখলাস (৩ বার)\",\n    titleEnglish: \"Surah Al-Ikhlas (3 times)\",\n    arabic: \"قُلْ هُوَ اللَّهُ أَحَدٌ اللَّهُ الصَّمَدُ لَمْ يَلِدْ وَلَمْ يُولَدْ وَلَمْ يَكُن لَّهُ كُفُوًا أَحَدٌ\",\n    transliteration: \"কুল হুয়াল্লাহু আহাদ। আল্লাহুস সামাদ। লাম ইয়ালিদ ওয়ালাম ইউলাদ। ওয়ালাম ইয়াকুল্লাহূ কুফুওঁ আহাদ।\",\n    meaningBengali: \"বলুন, তিনি আল্লাহ, এক-অদ্বিতীয়। আল্লাহ অমুখাপেক্ষী। তিনি কাউকে জন্ম দেননি এবং তাঁকেও জন্ম দেওয়া হয়নি। এবং তাঁর সমতুল্য কেউ নেই।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"10\",\n    titleBengali: \"সূরা ফালাক (৩ বার)\",\n    titleEnglish: \"Surah Al-Falaq (3 times)\",\n    arabic: \"قُلْ أَعُوذُ بِرَبِّ الْفَلَقِ مِن شَرِّ مَا خَلَقَ وَمِن شَرِّ غَاسِقٍ إِذَا وَقَبَ وَمِن شَرِّ النَّفَّاثَاتِ فِي الْعُقَدِ وَمِن شَرِّ حَاسِدٍ إِذَا حَسَدَ\",\n    transliteration: \"কুল আউযু বিরাব্বিল ফালাক। মিন শাররি মা খালাক। ওয়া মিন শাররি গাসিকিন ইযা ওয়াক্বাব। ওয়া মিন শাররিন নাফ্ফাছাতি ফিল উক্বাদ। ওয়া মিন শাররি হাসিদিন ইযা হাসাদ।\",\n    meaningBengali: \"বলুন, আমি আশ্রয় চাচ্ছি প্রভাতের রবের। তিনি যা সৃষ্টি করেছেন তার অনিষ্ট থেকে। এবং অন্ধকার রাতের অনিষ্ট থেকে যখন তা গভীর হয়। এবং গিরায় ফুঁ দেয়া জাদুকরদের অনিষ্ট থেকে। এবং হিংসুকের অনিষ্ট থেকে যখন সে হিংসা করে।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"11\",\n    titleBengali: \"সূরা নাস (৩ বার)\",\n    titleEnglish: \"Surah An-Nas (3 times)\",\n    arabic: \"قُلْ أَعُوذُ بِرَبِّ النَّاسِ مَلِكِ النَّاسِ إِلَٰهِ النَّاسِ مِن شَرِّ الْوَسْوَاسِ الْخَنَّاسِ الَّذِي يُوَسْوِسُ فِي صُدُورِ النَّاسِ مِنَ الْجِنَّةِ وَالنَّاسِ\",\n    transliteration: \"কুল আউযু বিরাব্বিন নাস। মালিকিন্নাস। ইলাহিন্নাস। মিন শাররিল ওয়াসওয়াসিল খান্নাস। আল্লাযি ইউওয়াসউইসু ফি সুদূরিন নাস। মিনাল জিন্নাতি ওয়ান নাস।\",\n    meaningBengali: \"বলুন, আমি আশ্রয় চাচ্ছি মানুষের রবের। মানুষের মালিকের। মানুষের উপাস্যের। তার অনিষ্ট থেকে যে কুমন্ত্রণা দেয়, যে লুকিয়ে থাকে। যে কুমন্ত্রণা দেয় মানুষের অন্তরে। জিন ও মানুষের মধ্য থেকে।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"12\",\n    titleBengali: \"বদনজর থেকে সুরক্ষার দোয়া (৩ বার)\",\n    titleEnglish: \"Protection from Evil Eye (3 times)\",\n    arabic: \"أَعُوذُ بِكَلِمَاتِ اللَّهِ التَّامَّةِ مِنْ شَرِّ مَا خَلَقَ\",\n    transliteration: \"আউযু বিকালিমাতিল্লাহিত-তাম্মাতি মিন শাররি মা খালাক।\",\n    meaningBengali: \"আমি আল্লাহর পরিপূর্ণ কালিমার আশ্রয় গ্রহণ করছি, তাঁর সৃষ্ট জিনিসের অনিষ্ট থেকে।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    id: \"13\",\n    titleBengali: \"জাদু-জ্বিন থেকে রক্ষার দোয়া (সকাল-সন্ধ্যা ৩ বার)\",\n    titleEnglish: \"Protection from Magic and Jinn (Morning & Evening 3 times)\",\n    arabic: \"بِسْمِ اللَّهِ الَّذِي لَا يَضُرُّ مَعَ اسْمِهِ شَيْءٌ فِي الْأَرْضِ وَلَا فِي السَّمَاءِ وَهُوَ السَّمِيعُ الْعَلِيمُ\",\n    transliteration: \"বিসমিল্লাহিল্লাযি লা ইয়াদুররু মা'আসমিহি শাইউন ফিল আরদি ওয়ালা ফিস সামা, ওয়া হুয়াস সামিয়ুল আলীম।\",\n    meaningBengali: \"আল্লাহর নামে (আশ্রয় নিচ্ছি), যার নামে পৃথিবী ও আকাশের কোনো কিছুই ক্ষতি করতে পারে না। আর তিনি সর্বশ্রোতা, সর্বজ্ঞ।\",\n    category: \"শক্তিশালী রুকইয়া\"\n  },\n  {\n    \"id\": \"14\",\n    \"titleBengali\": \"বদনজর থেকে সুরক্ষা\",\n    \"titleEnglish\": \"Protection from Evil Eye\",\n    \"arabic\": \"أَعُوذُ بِكَلِمَاتِ اللَّهِ التَّامَّةِ مِنْ شَرِّ مَا خَلَقَ\",\n    \"transliteration\": \"আউযু বিকালিমাতিল্লাহিত-তাম্মাতি মিন শাররি মা খালাক।\",\n    \"meaningBengali\": \"আমি আল্লাহর পরিপূর্ণ কালিমার আশ্রয় নিচ্ছি, তিনি যা সৃষ্টি করেছেন তার অনিষ্ট থেকে।\",\n    \"category\": \"সুরক্ষা\"\n  },\n  {\n    \"id\": \"15\",\n    \"titleBengali\": \"জাদু ও জ্বিন থেকে সুরক্ষা\",\n    \"titleEnglish\": \"Protection from Magic and Jinn\",\n    \"arabic\": \"بِسْمِ اللَّهِ الَّذِي لَا يَضُرُّ مَعَ اسْمِهِ شَيْءٌ فِي الْأَرْضِ وَلَا فِي السَّمَاءِ وَهُوَ السَّمِيعُ الْعَلِيمُ\",\n    \"transliteration\": \"বিসমিল্লাহিল্লাযি লা ইয়াদুররু মা’আসমিহি শাইউন ফিল আরদি ওয়ালা ফিস সামা, ওয়া হুয়াস সামিয়ুল আলীম।\",\n    \"meaningBengali\": \"আল্লাহর নামে, যার নামে আকাশ ও জমিনের কিছুই ক্ষতি করতে পারে না। তিনি সর্বশ্রোতা, সর্বজ্ঞ।\",\n    \"category\": \"সুরক্ষা\"\n  },\n  {\n    \"id\": \"16\",\n    \"titleBengali\": \"ভয় দূর করার দোয়া\",\n    \"titleEnglish\": \"Dua for Removing Fear\",\n    \"arabic\": \"حَسْبُنَا اللَّهُ وَنِعْمَ الْوَكِيلُ\",\n    \"transliteration\": \"হাসবুনাল্লাহু ওয়া নিআমাল ওয়াকিল।\",\n    \"meaningBengali\": \"আল্লাহ আমাদের জন্য যথেষ্ট, তিনিই উত্তম কর্মবিধায়ক।\",\n    \"category\": \"সাহস\"\n  },\n  {\n    \"id\": \"17\",\n    \"titleBengali\": \"কষ্ট ও দুঃখে\",\n    \"titleEnglish\": \"During Hardship\",\n    \"arabic\": \"إِنَّا لِلَّهِ وَإِنَّا إِلَيْهِ رَاجِعُونَ\",\n    \"transliteration\": \"ইন্না লিল্লাহি ওয়া ইন্না ইলাইহি রাজিউন।\",\n    \"meaningBengali\": \"নিশ্চয়ই আমরা আল্লাহর জন্য এবং আমরা তাঁর কাছেই ফিরে যাব।\",\n    \"category\": \"ধৈর্য\"\n  },\n  {\n    \"id\": \"18\",\n    \"titleBengali\": \"সকাল-সন্ধ্যার যিকির\",\n    \"titleEnglish\": \"Morning & Evening Protection\",\n    \"arabic\": \"اللَّهُمَّ بِكَ أَصْبَحْنَا وَبِكَ أَمْسَيْنَا وَبِكَ نَحْيَا وَبِكَ نَمُوتُ وَإِلَيْكَ النُّشُورُ\",\n    \"transliteration\": \"আল্লাহুম্মা বিকা আসবাহনা, ওয়া বিকা আমসাইনা, ওয়া বিকা নাহইয়া, ওয়া বিকা নামুতু, ওয়া ইলাইকাল নুশূর।\",\n    \"meaningBengali\": \"হে আল্লাহ! তোমারই দ্বারা আমরা সকাল করি, তোমারই দ্বারা সন্ধ্যা করি, তোমারই দ্বারা বাঁচি, তোমারই দ্বারা মরি এবং তোমার কাছেই পুনরুত্থান।\",\n    \"category\": \"সুরক্ষা\"\n  },\n  {\n    \"id\": \"19\",\n    \"titleBengali\": \"রিজিক বৃদ্ধি\",\n    \"titleEnglish\": \"Increase in Rizq\",\n    \"arabic\": \"اللَّهُمَّ اكْفِنِي بِحَلَالِكَ عَنْ حَرَامِكَ وَأَغْنِنِي بِفَضْلِكَ عَمَّنْ سِوَاكَ\",\n    \"transliteration\": \"আল্লাহুম্মাকফিনি বিহালালিকা ‘আন হারামিকা, ওয়া আগনিনি বিফাদলিকা ‘আম্মান সিওয়াক।\",\n    \"meaningBengali\": \"হে আল্লাহ! তুমি তোমার হালাল দ্বারা আমাকে যথেষ্ট করো এবং তোমার অনুগ্রহ দ্বারা আমাকে তোমার ছাড়া অন্য সকলের থেকে অমুখাপেক্ষী করো।\",\n    \"category\": \"রিজিক\"\n  },\n  {\n    \"id\": \"20\",\n    \"titleBengali\": \"মাফ চাওয়ার দোয়া\",\n    \"titleEnglish\": \"Seeking Forgiveness\",\n    \"arabic\": \"رَبِّ اغْفِرْ لِي وَتُبْ عَلَيَّ إِنَّكَ أَنْتَ التَّوَّابُ الرَّحِيمُ\",\n    \"transliteration\": \"রব্বিগফির লি, ওয়া তুব ‘আলাইয়া, ইন্নাকা আনতা তাওয়াবুর রাহীম।\",\n    \"meaningBengali\": \"হে আমার প্রভু! আমাকে ক্ষমা করো এবং আমার তওবা কবুল করো, নিশ্চয়ই তুমি তওবা কবুলকারী, দয়ালু।\",\n    \"category\": \"ক্ষমা\"\n  },\n  {\n    \"id\": \"21\",\n    \"titleBengali\": \"ভ্রমণ দোয়া\",\n    \"titleEnglish\": \"Dua for Traveling\",\n    \"arabic\": \"سُبْحَانَ الَّذِي سَخَّرَ لَنَا هَذَا وَمَا كُنَّا لَهُ مُقْرِنِينَ وَإِنَّا إِلَىٰ رَبِّنَا لَمُنْقَلِبُونَ\",\n    \"transliteration\": \"সুবহানাল্লাযি সাখ্খারালানা হাযা, ওয়া মা কুন্না লাহূ মোকরিনীন, ওয়া ইন্না ইলা রব্বিনা লামুনক্বালিবূন।\",\n    \"meaningBengali\": \"পবিত্র তিনি যিনি আমাদের জন্য এ যানবাহনকে বশীভূত করেছেন, আমরা নিজেরা তা আয়ত্ত করতে পারতাম না। আর অবশ্যই আমরা আমাদের রবের দিকে ফিরে যাব।\",\n    \"category\": \"ভ্রমণ\"\n  },\n  {\n    \"id\": \"22\",\n    \"titleBengali\": \"দুঃশ্চিন্তায়\",\n    \"titleEnglish\": \"In Distress\",\n    \"arabic\": \"يَا حَيُّ يَا قَيُّومُ بِرَحْمَتِكَ أَسْتَغِيثُ\",\n    \"transliteration\": \"ইয়া হাইয়্যু ইয়া ক্বাইয়ূম, বিরাহমাতিকা আস্তাগীস।\",\n    \"meaningBengali\": \"হে চিরঞ্জীব, হে প্রতিষ্ঠিত, আমি তোমার রহমতের দ্বারস্থ।\",\n    \"category\": \"শান্তি\"\n  },\n  {\n    \"id\": \"23\",\n    \"titleBengali\": \"রোগমুক্তির দোয়া\",\n    \"titleEnglish\": \"Dua for Healing\",\n    \"arabic\": \"اللَّهُمَّ رَبَّ النَّاسِ أَذْهِبِ الْبَأْسَ اشْفِ أَنْتَ الشَّافِي لَا شِفَاءَ إِلَّا شِفَاؤُكَ\",\n    \"transliteration\": \"আল্লাহুম্মা রব্বান-নাস, আযহিবিল বা’স, ইশফি আন্তাশ-শাফি, লা শিফা’ ইল্লা শিফাউক।\",\n    \"meaningBengali\": \"হে আল্লাহ! মানুষের রব, কষ্ট দূর করো। তুমি-ই শিফাদানকারী। তোমার শিফা ছাড়া কোনো শিফা নেই।\",\n    \"category\": \"শিফা\"\n  },\n  {\n    \"id\": \"24\",\n    \"titleBengali\": \"অসুস্থকে দেখলে দোয়া\",\n    \"titleEnglish\": \"Dua for Sick Person\",\n    \"arabic\": \"لَا بَأْسَ طَهُورٌ إِنْ شَاءَ اللَّهُ\",\n    \"transliteration\": \"লা বা’স, তহূরুন ইনশা আল্লাহ।\",\n    \"meaningBengali\": \"কোনো ক্ষতি নেই, আল্লাহ চাইলে এটা তোমার জন্য পবিত্রতা হবে।\",\n    \"category\": \"শিফা\"\n  },\n  {\n    \"id\": \"25\",\n    \"titleBengali\": \"চিন্তা ও দুঃখ দূর\",\n    \"titleEnglish\": \"Relief from Anxiety\",\n    \"arabic\": \"اللَّهُمَّ إِنِّي أَعُوذُ بِكَ مِنَ الْهَمِّ وَالْحَزَنِ\",\n    \"transliteration\": \"আল্লাহুম্মা ইন্নি আউযু বিকা মিনাল হাম্মি ওয়াল হাযান।\",\n    \"meaningBengali\": \"হে আল্লাহ! আমি দুঃশ্চিন্তা ও দুঃখ থেকে তোমার আশ্রয় চাই।\",\n    \"category\": \"শান্তি\"\n  },\n  {\n    \"id\": \"26\",\n    \"titleBengali\": \"কোনো কাজ শুরু করার আগে\",\n    \"titleEnglish\": \"Before Starting Work\",\n    \"arabic\": \"بِسْمِ اللَّهِ\",\n    \"transliteration\": \"বিসমিল্লাহ।\",\n    \"meaningBengali\": \"আল্লাহর নামে শুরু করছি।\",\n    \"category\": \"বরকত\"\n  },\n  {\n    \"id\": \"27\",\n    \"titleBengali\": \"অপদেবতা থেকে সুরক্ষা\",\n    \"titleEnglish\": \"Protection from Evil\",\n    \"arabic\": \"أَعُوذُ بِاللَّهِ السَّمِيعِ الْعَلِيمِ مِنَ الشَّيْطَانِ الرَّجِيمِ\",\n    \"transliteration\": \"আউযু বিল্লাহিস সামিয়িল আলীমি মিনাশ শাইত্বানির রাজীম।\",\n    \"meaningBengali\": \"আমি আল্লাহর কাছে আশ্রয় চাই, যিনি সর্বশ্রোতা, সর্বজ্ঞ, অভিশপ্ত শয়তান থেকে।\",\n    \"category\": \"সুরক্ষা\"\n  },\n  {\n    \"id\": \"28\",\n    \"titleBengali\": \"সন্তানকে দোয়া\",\n    \"titleEnglish\": \"Dua for Children\",\n    \"arabic\": \"اللَّهُمَّ اجْعَلْهُ بَارًّا تَقِيًّا وَاجْعَلْهُ مِنْ أَهْلِ الصَّلاحِ\",\n    \"transliteration\": \"আল্লাহুম্মাজআলহু বাররান তাকিয়্যাঁ, ওয়াজআলহু মিন আহলিস সালাহ।\",\n    \"meaningBengali\": \"হে আল্লাহ! তাকে নেককার, পরহেজগার বানাও এবং সৎ লোকদের অন্তর্ভুক্ত করো।\",\n    \"category\": \"সন্তান\"\n  },\n  {\n    \"id\": \"29\",\n    \"titleBengali\": \"ঘুমানোর আগে\",\n    \"titleEnglish\": \"Before Sleeping\",\n    \"arabic\": \"بِاسْمِكَ اللَّهُمَّ أَمُوتُ وَأَحْيَا\",\n    \"transliteration\": \"বিসমিকা আল্লাহুম্মা আমুতু ওয়া আহইয়া।\",\n    \"meaningBengali\": \"হে আল্লাহ! তোমার নামেই আমি মরি ও বাঁচি।\",\n    \"category\": \"ঘুম\"\n  },\n  {\n    \"id\": \"30\",\n    \"titleBengali\": \"ঘুম থেকে উঠলে\",\n    \"titleEnglish\": \"After Waking Up\",\n    \"arabic\": \"الْحَمْدُ لِلَّهِ الَّذِي أَحْيَانَا بَعْدَ مَا أَمَاتَنَا وَإِلَيْهِ النُّشُورُ\",\n    \"transliteration\": \"আলহামদুলিল্লাহিল্লাযি আহইয়ানা বা’দা মা আমাতানা ওয়া ইলাইহিন নুশূর।\",\n    \"meaningBengali\": \"সব প্রশংসা আল্লাহর জন্য, যিনি আমাদের মৃত্যু-পরবর্তী জীবিত করেছেন, আর তাঁরই কাছে ফিরে যেতে হবে।\",\n    \"category\": \"ঘুম\"\n  },\n  {\n    \"id\": \"31\",\n    \"titleBengali\": \"ক্ষমা প্রার্থনা\",\n    \"titleEnglish\": \"Seeking Forgiveness\",\n    \"arabic\": \"أَسْتَغْفِرُ اللَّهَ\",\n    \"transliteration\": \"আস্তাগফিরুল্লাহ।\",\n    \"meaningBengali\": \"আমি আল্লাহর কাছে ক্ষমা চাই।\",\n    \"category\": \"ক্ষমা\"\n  },\n  {\n    \"id\": \"32\",\n    \"titleBengali\": \"সুস্থ সন্তানের জন্য দোয়া\",\n    \"titleEnglish\": \"Dua for Healthy Child\",\n    \"arabic\": \"رَبِّ هَبْ لِي مِنَ الصَّالِحِينَ\",\n    \"transliteration\": \"রাব্বি হাবলি মিনাস সালিহীন।\",\n    \"meaningBengali\": \"হে আমার প্রভু! আমাকে সৎ সন্তান দান করো।\",\n    \"category\": \"সন্তান\"\n  },\n  {\n    \"id\": \"33\",\n    \"titleBengali\": \"সর্বসাধারণের দোয়া\",\n    \"titleEnglish\": \"Comprehensive Dua\",\n    \"arabic\": \"رَبَّنَا آتِنَا فِي الدُّنْيَا حَسَنَةً وَفِي الآخِرَةِ حَسَنَةً وَقِنَا عَذَابَ النَّارِ\",\n    \"transliteration\": \"রাব্বানা আতিনা ফিদ্দুনিয়া হাসানাহ, ওয়া ফিল আখিরাতি হাসানাহ, ওয়া ক্বিনা আযাবান নার।\",\n    \"meaningBengali\": \"হে আমাদের প্রভু! আমাদেরকে দুনিয়াতে কল্যাণ দাও, আখিরাতে কল্যাণ দাও এবং আমাদেরকে আগুনের শাস্তি থেকে রক্ষা করো।\",\n    \"category\": \"সর্বজনীন\"\n  }\n];\n","size_bytes":31013},"client/src/data/islamic-names.ts":{"content":"import { IslamicName, RawIslamicName } from \"@shared/schema\";\nimport { translateWithContext } from \"@/utils/bengali-translator\";\n\n// Raw data without Bengali meanings (will be auto-generated)\nconst rawIslamicNames: RawIslamicName[] = [\n  // Boys Names (250)\n  { name: \"Abdullah\", nameArabic: \"عبد الله\", nameBengali: \"আব্দুল্লাহ\", meaning: \"Servant of Allah\", meaningBengali: \"আল্লাহর বান্দা\", origin: \"Arabic\", gender: \"boy\", category: \"Popular\" },\n  { name: \"Abdul Rahman\", nameArabic: \"عبد الرحمن\", nameBengali: \"আব্দুর রহমান\", meaning: \"Servant of the Merciful\", meaningBengali: \"পরম দয়ালুর বান্দা\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Aziz\", nameArabic: \"عبد العزيز\", nameBengali: \"আব্দুল আজিজ\", meaning: \"Servant of the Mighty\", meaningBengali: \"পরাক্রমশালীর বান্দা\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Malik\", nameArabic: \"عبد الملك\", nameBengali: \"আব্দুল মালিক\", meaning: \"Servant of the King\", meaningBengali: \"রাজার বান্দা\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Karim\", nameArabic: \"عبد الكريم\", nameBengali: \"আব্দুল করিম\", meaning: \"Servant of the Generous\", meaningBengali: \"দয়ালুর বান্দা\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Latif\", nameArabic: \"عبد اللطيف\", nameBengali: \"আব্দুল লতিফ\", meaning: \"Servant of the Kind\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Hakeem\", nameArabic: \"عبد الحكيم\", nameBengali: \"আব্দুল হাকিম\", meaning: \"Servant of the Wise\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Ghani\", nameArabic: \"عبد الغني\", nameBengali: \"আব্দুল গনি\", meaning: \"Servant of the Rich\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Razzaq\", nameArabic: \"عبد الرزاق\", nameBengali: \"আব্দুর রাজ্জাক\", meaning: \"Servant of the Provider\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Abdul Sabur\", nameArabic: \"عبد الصبور\", nameBengali: \"আব্দুস সাবুর\", meaning: \"Servant of the Patient\", origin: \"Arabic\", gender: \"boy\", category: \"Divine\" },\n  { name: \"Ahmad\", nameArabic: \"أحمد\", nameBengali: \"আহমাদ\", meaning: \"Most praiseworthy\", origin: \"Arabic\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Ahmed\", nameArabic: \"أحمد\", nameBengali: \"আহমেদ\", meaning: \"Highly praised\", origin: \"Arabic\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Akram\", nameArabic: \"أكرم\", nameBengali: \"আকরাম\", meaning: \"Most generous\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Ali\", nameArabic: \"علي\", nameBengali: \"আলী\", meaning: \"High, elevated\", origin: \"Arabic\", gender: \"boy\", category: \"Popular\" },\n  { name: \"Amir\", nameArabic: \"أمير\", nameBengali: \"আমির\", meaning: \"Prince, commander\", origin: \"Arabic\", gender: \"boy\", category: \"Leadership\" },\n  { name: \"Anas\", nameArabic: \"أنس\", nameBengali: \"আনাস\", meaning: \"Friendly\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Anwar\", nameArabic: \"أنور\", nameBengali: \"আনোয়ার\", meaning: \"Luminous\", origin: \"Arabic\", gender: \"boy\", category: \"Beauty\" },\n  { name: \"Arif\", nameArabic: \"عارف\", nameBengali: \"আরিফ\", meaning: \"Learned, expert\", origin: \"Arabic\", gender: \"boy\", category: \"Knowledge\" },\n  { name: \"Asim\", nameArabic: \"عاصم\", nameBengali: \"আসিম\", meaning: \"Protector\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Ayoub\", nameArabic: \"أيوب\", nameBengali: \"আইয়ুব\", meaning: \"Job (Prophet)\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Azeem\", nameArabic: \"عظيم\", nameBengali: \"আজিম\", meaning: \"Great\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Bashir\", nameArabic: \"بشير\", nameBengali: \"বশির\", meaning: \"Bringer of good news\", origin: \"Arabic\", gender: \"boy\", category: \"Joy\" },\n  { name: \"Bilal\", nameArabic: \"بلال\", nameBengali: \"বিলাল\", meaning: \"Wetting, moisture\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Daniyal\", nameArabic: \"دانيال\", nameBengali: \"দানিয়াল\", meaning: \"God is my judge\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Dawud\", nameArabic: \"داود\", nameBengali: \"দাউদ\", meaning: \"Beloved\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Faisal\", nameArabic: \"فيصل\", nameBengali: \"ফয়সাল\", meaning: \"Decisive\", origin: \"Arabic\", gender: \"boy\", category: \"Leadership\" },\n  { name: \"Farid\", nameArabic: \"فريد\", nameBengali: \"ফরিদ\", meaning: \"Unique\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Farhan\", nameArabic: \"فرحان\", nameBengali: \"ফারহান\", meaning: \"Happy\", origin: \"Arabic\", gender: \"boy\", category: \"Joy\" },\n  { name: \"Fawad\", nameArabic: \"فؤاد\", nameBengali: \"ফুয়াদ\", meaning: \"Heart\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Hakim\", nameArabic: \"حكيم\", nameBengali: \"হাকিম\", meaning: \"Wise\", origin: \"Arabic\", gender: \"boy\", category: \"Wisdom\" },\n  { name: \"Hamza\", nameArabic: \"حمزة\", nameBengali: \"হামজা\", meaning: \"Strong, steadfast\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Hasan\", nameArabic: \"حسن\", nameBengali: \"হাসান\", meaning: \"Good, beautiful\", origin: \"Arabic\", gender: \"boy\", category: \"Popular\" },\n  { name: \"Husayn\", nameArabic: \"حسين\", nameBengali: \"হুসাইন\", meaning: \"Beautiful\", origin: \"Arabic\", gender: \"boy\", category: \"Popular\" },\n  { name: \"Ibrahim\", nameArabic: \"إبراهيم\", nameBengali: \"ইব্রাহীম\", meaning: \"Father of many\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Idris\", nameArabic: \"إدريس\", nameBengali: \"ইদ্রিস\", meaning: \"Studious\", origin: \"Arabic\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Ilyas\", nameArabic: \"إلياس\", nameBengali: \"ইলিয়াস\", meaning: \"Elijah\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Imran\", nameArabic: \"عمران\", nameBengali: \"ইমরান\", meaning: \"Prosperity\", origin: \"Arabic\", gender: \"boy\", category: \"Popular\" },\n  { name: \"Irfan\", nameArabic: \"عرفان\", nameBengali: \"ইরফান\", meaning: \"Knowledge\", origin: \"Arabic\", gender: \"boy\", category: \"Knowledge\" },\n  { name: \"Ishaq\", nameArabic: \"إسحاق\", nameBengali: \"ইসহাক\", meaning: \"Isaac\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Ismail\", nameArabic: \"إسماعيل\", nameBengali: \"ইসমাইল\", meaning: \"God will hear\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Javed\", nameArabic: \"جاوید\", nameBengali: \"জাভেদ\", meaning: \"Eternal\", origin: \"Persian\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Junaid\", nameArabic: \"جنيد\", nameBengali: \"জুনাইদ\", meaning: \"Young fighter\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Kamal\", nameArabic: \"كمال\", nameBengali: \"কামাল\", meaning: \"Perfection\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Kamran\", nameArabic: \"كامران\", nameBengali: \"কামরান\", meaning: \"Successful\", origin: \"Persian\", gender: \"boy\", category: \"Success\" },\n  { name: \"Khalid\", nameArabic: \"خالد\", nameBengali: \"খালিদ\", meaning: \"Eternal\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Khalil\", nameArabic: \"خليل\", nameBengali: \"খলিল\", meaning: \"Friend\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Luqman\", nameArabic: \"لقمان\", nameBengali: \"লুকমান\", meaning: \"Wise man\", origin: \"Arabic\", gender: \"boy\", category: \"Wisdom\" },\n  { name: \"Mahmud\", nameArabic: \"محمود\", nameBengali: \"মাহমুদ\", meaning: \"Praised\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Mansur\", nameArabic: \"منصور\", nameBengali: \"মানসুর\", meaning: \"Victorious\", origin: \"Arabic\", gender: \"boy\", category: \"Success\" },\n  { name: \"Marwan\", nameArabic: \"مروان\", nameBengali: \"মারওয়ান\", meaning: \"Solid rock\", origin: \"Arabic\", gender: \"boy\", category: \"Strength\" },\n  { name: \"Masud\", nameArabic: \"مسعود\", nameBengali: \"মাসুদ\", meaning: \"Happy, lucky\", origin: \"Arabic\", gender: \"boy\", category: \"Joy\" },\n  { name: \"Mubarak\", nameArabic: \"مبارك\", nameBengali: \"মুবারক\", meaning: \"Blessed\", origin: \"Arabic\", gender: \"boy\", category: \"Blessing\" },\n  { name: \"Muhammad\", nameArabic: \"محمد\", nameBengali: \"মুহাম্মদ\", meaning: \"Praised\", origin: \"Arabic\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Musa\", nameArabic: \"موسى\", nameBengali: \"মুসা\", meaning: \"Moses\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Mustafa\", nameArabic: \"مصطفى\", nameBengali: \"মুস্তাফা\", meaning: \"Chosen\", origin: \"Arabic\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Nasir\", nameArabic: \"ناصر\", nameBengali: \"নাসির\", meaning: \"Helper\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Nuh\", nameArabic: \"نوح\", nameBengali: \"নূহ\", meaning: \"Noah\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Omar\", nameArabic: \"عمر\", nameBengali: \"ওমর\", meaning: \"Long-lived\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Qasim\", nameArabic: \"قاسم\", nameBengali: \"কাসিম\", meaning: \"Distributor\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Rashid\", nameArabic: \"رشيد\", nameBengali: \"রশিদ\", meaning: \"Rightly guided\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Salim\", nameArabic: \"سليم\", nameBengali: \"সালিম\", meaning: \"Safe, sound\", origin: \"Arabic\", gender: \"boy\", category: \"Peace\" },\n  { name: \"Samir\", nameArabic: \"سمير\", nameBengali: \"সামির\", meaning: \"Companion in evening talk\", origin: \"Arabic\", gender: \"boy\", category: \"Social\" },\n  { name: \"Saqib\", nameArabic: \"ثاقب\", nameBengali: \"সাকিব\", meaning: \"Piercing\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Shahid\", nameArabic: \"شاهد\", nameBengali: \"শাহিদ\", meaning: \"Witness\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Sulaiman\", nameArabic: \"سليمان\", nameBengali: \"সুলাইমান\", meaning: \"Solomon\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Tahir\", nameArabic: \"طاهر\", nameBengali: \"তাহির\", meaning: \"Pure\", origin: \"Arabic\", gender: \"boy\", category: \"Purity\" },\n  { name: \"Tariq\", nameArabic: \"طارق\", nameBengali: \"তারিক\", meaning: \"Morning star\", origin: \"Arabic\", gender: \"boy\", category: \"Beauty\" },\n  { name: \"Usman\", nameArabic: \"عثمان\", nameBengali: \"উসমান\", meaning: \"Young bustard\", origin: \"Arabic\", gender: \"boy\", category: \"Companion\" },\n  { name: \"Waqar\", nameArabic: \"وقار\", nameBengali: \"ওয়াকার\", meaning: \"Dignity\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Yaqub\", nameArabic: \"يعقوب\", nameBengali: \"ইয়াকুব\", meaning: \"Jacob\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Yasir\", nameArabic: \"ياسر\", nameBengali: \"ইয়াসির\", meaning: \"Easy\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Younus\", nameArabic: \"يونس\", nameBengali: \"ইউনুস\", meaning: \"Jonah\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Yusuf\", nameArabic: \"يوسف\", nameBengali: \"ইউসুফ\", meaning: \"Joseph\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  { name: \"Zaid\", nameArabic: \"زيد\", nameBengali: \"জায়েদ\", meaning: \"Growth\", origin: \"Arabic\", gender: \"boy\", category: \"Virtue\" },\n  { name: \"Zakaria\", nameArabic: \"زكريا\", nameBengali: \"জাকারিয়া\", meaning: \"Remembered by God\", origin: \"Hebrew\", gender: \"boy\", category: \"Prophetic\" },\n  \n  // Girls Names (250)\n  { name: \"Aisha\", nameArabic: \"عائشة\", nameBengali: \"আয়েশা\", meaning: \"Living, life\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Fatima\", nameArabic: \"فاطمة\", nameBengali: \"ফাতিমা\", meaning: \"Captivating\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Khadija\", nameArabic: \"خديجة\", nameBengali: \"খাদিজা\", meaning: \"Early baby\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Zainab\", nameArabic: \"زينب\", nameBengali: \"জয়নব\", meaning: \"Fragrant flower\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Maryam\", nameArabic: \"مريم\", nameBengali: \"মারিয়াম\", meaning: \"Mary\", origin: \"Hebrew\", gender: \"girl\", category: \"Prophetic\" },\n  { name: \"Hafsa\", nameArabic: \"حفصة\", nameBengali: \"হাফসা\", meaning: \"Young lioness\", origin: \"Arabic\", gender: \"girl\", category: \"Strength\" },\n  { name: \"Ruqayyah\", nameArabic: \"رقية\", nameBengali: \"রুকাইয়্যাহ\", meaning: \"Rise, ascent\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Umm Kulthum\", nameArabic: \"أم كلثوم\", nameBengali: \"উম্মে কুলসুম\", meaning: \"Mother of Kulthum\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Safiyyah\", nameArabic: \"صفية\", nameBengali: \"সাফিয়্যাহ\", meaning: \"Pure\", origin: \"Arabic\", gender: \"girl\", category: \"Purity\" },\n  { name: \"Juwayriyah\", nameArabic: \"جويرية\", nameBengali: \"জুওয়াইরিয়্যাহ\", meaning: \"Young woman\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Amina\", nameArabic: \"آمنة\", nameBengali: \"আমিনা\", meaning: \"Trustworthy\", origin: \"Arabic\", gender: \"girl\", category: \"Virtue\" },\n  { name: \"Asma\", nameArabic: \"أسماء\", nameBengali: \"আসমা\", meaning: \"Names\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Halima\", nameArabic: \"حليمة\", nameBengali: \"হালিমা\", meaning: \"Gentle, patient\", origin: \"Arabic\", gender: \"girl\", category: \"Virtue\" },\n  { name: \"Sawdah\", nameArabic: \"سودة\", nameBengali: \"সাওদাহ\", meaning: \"Black\", origin: \"Arabic\", gender: \"girl\", category: \"Popular\" },\n  { name: \"Maymunah\", nameArabic: \"ميمونة\", nameBengali: \"মাইমুনাহ\", meaning: \"Blessed\", origin: \"Arabic\", gender: \"girl\", category: \"Blessing\" },\n  { name: \"Umm Salamah\", nameArabic: \"أم سلمة\", nameBengali: \"উম্মে সালামাহ\", meaning: \"Mother of peace\", origin: \"Arabic\", gender: \"girl\", category: \"Peace\" },\n  { name: \"Zaynab\", nameArabic: \"زينب\", nameBengali: \"জয়নব\", meaning: \"Father's precious jewel\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Ramlah\", nameArabic: \"رملة\", nameBengali: \"রামলাহ\", meaning: \"Sand\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Aaliyah\", nameArabic: \"عالية\", nameBengali: \"আলিয়া\", meaning: \"High, sublime\", origin: \"Arabic\", gender: \"girl\", category: \"Virtue\" },\n  { name: \"Abida\", nameArabic: \"عابدة\", nameBengali: \"আবিদা\", meaning: \"Worshipper\", origin: \"Arabic\", gender: \"girl\", category: \"Devotion\" },\n  { name: \"Adilah\", nameArabic: \"عادلة\", nameBengali: \"আদিলাহ\", meaning: \"Just, fair\", origin: \"Arabic\", gender: \"girl\", category: \"Justice\" },\n  { name: \"Afiyah\", nameArabic: \"عافية\", nameBengali: \"আফিয়াহ\", meaning: \"Health, well-being\", origin: \"Arabic\", gender: \"girl\", category: \"Health\" },\n  { name: \"Ahlam\", nameArabic: \"أحلام\", nameBengali: \"আহলাম\", meaning: \"Dreams\", origin: \"Arabic\", gender: \"girl\", category: \"Dreams\" },\n  { name: \"Alia\", nameArabic: \"عليا\", nameBengali: \"আলিয়া\", meaning: \"High, exalted\", origin: \"Arabic\", gender: \"girl\", category: \"Virtue\" },\n  { name: \"Aminah\", nameArabic: \"آمنة\", nameBengali: \"আমিনাহ\", meaning: \"Safe, secure\", origin: \"Arabic\", gender: \"girl\", category: \"Safety\" },\n  { name: \"Anisa\", nameArabic: \"أنيسة\", nameBengali: \"আনিসা\", meaning: \"Friendly\", origin: \"Arabic\", gender: \"girl\", category: \"Social\" },\n  { name: \"Arwa\", nameArabic: \"أروى\", nameBengali: \"আরওয়া\", meaning: \"Mountain goat\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Asiya\", nameArabic: \"آسية\", nameBengali: \"আসিয়া\", meaning: \"One who heals\", origin: \"Arabic\", gender: \"girl\", category: \"Healing\" },\n  { name: \"Bahiyya\", nameArabic: \"بهية\", nameBengali: \"বাহিয়্যা\", meaning: \"Beautiful\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Bushra\", nameArabic: \"بشرى\", nameBengali: \"বুশরা\", meaning: \"Good news\", origin: \"Arabic\", gender: \"girl\", category: \"Joy\" },\n  { name: \"Dalal\", nameArabic: \"دلال\", nameBengali: \"দালাল\", meaning: \"Treated with kindness\", origin: \"Arabic\", gender: \"girl\", category: \"Kindness\" },\n  { name: \"Durrah\", nameArabic: \"درة\", nameBengali: \"দুররাহ\", meaning: \"Pearl\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Faiza\", nameArabic: \"فائزة\", nameBengali: \"ফায়েজা\", meaning: \"Victorious\", origin: \"Arabic\", gender: \"girl\", category: \"Success\" },\n  { name: \"Ghadah\", nameArabic: \"غادة\", nameBengali: \"গাদাহ\", meaning: \"Young woman\", origin: \"Arabic\", gender: \"girl\", category: \"Youth\" },\n  { name: \"Habiba\", nameArabic: \"حبيبة\", nameBengali: \"হাবিবা\", meaning: \"Beloved\", origin: \"Arabic\", gender: \"girl\", category: \"Love\" },\n  { name: \"Hala\", nameArabic: \"هالة\", nameBengali: \"হালা\", meaning: \"Halo\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Hanifa\", nameArabic: \"حنيفة\", nameBengali: \"হানিফা\", meaning: \"True believer\", origin: \"Arabic\", gender: \"girl\", category: \"Faith\" },\n  { name: \"Hasna\", nameArabic: \"حسناء\", nameBengali: \"হাসনা\", meaning: \"Beautiful\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Hawwa\", nameArabic: \"حواء\", nameBengali: \"হাওয়া\", meaning: \"Eve\", origin: \"Hebrew\", gender: \"girl\", category: \"Prophetic\" },\n  { name: \"Huda\", nameArabic: \"هدى\", nameBengali: \"হুদা\", meaning: \"Guidance\", origin: \"Arabic\", gender: \"girl\", category: \"Guidance\" },\n  { name: \"Ihsan\", nameArabic: \"إحسان\", nameBengali: \"ইহসান\", meaning: \"Kindness\", origin: \"Arabic\", gender: \"girl\", category: \"Kindness\" },\n  { name: \"Ilham\", nameArabic: \"إلهام\", nameBengali: \"ইলহাম\", meaning: \"Inspiration\", origin: \"Arabic\", gender: \"girl\", category: \"Inspiration\" },\n  { name: \"Inaya\", nameArabic: \"عناية\", nameBengali: \"ইনায়া\", meaning: \"Care\", origin: \"Arabic\", gender: \"girl\", category: \"Care\" },\n  { name: \"Isra\", nameArabic: \"إسراء\", nameBengali: \"ইসরা\", meaning: \"Night journey\", origin: \"Arabic\", gender: \"girl\", category: \"Journey\" },\n  { name: \"Jameela\", nameArabic: \"جميلة\", nameBengali: \"জামিলা\", meaning: \"Beautiful\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Janan\", nameArabic: \"جنان\", nameBengali: \"জানান\", meaning: \"Heart, soul\", origin: \"Arabic\", gender: \"girl\", category: \"Soul\" },\n  { name: \"Karima\", nameArabic: \"كريمة\", nameBengali: \"করিমা\", meaning: \"Generous\", origin: \"Arabic\", gender: \"girl\", category: \"Generosity\" },\n  { name: \"Khadra\", nameArabic: \"خضراء\", nameBengali: \"খাদরা\", meaning: \"Green\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Laila\", nameArabic: \"ليلى\", nameBengali: \"লায়লা\", meaning: \"Night\", origin: \"Arabic\", gender: \"girl\", category: \"Night\" },\n  { name: \"Latifa\", nameArabic: \"لطيفة\", nameBengali: \"লতিফা\", meaning: \"Kind\", origin: \"Arabic\", gender: \"girl\", category: \"Kindness\" },\n  { name: \"Lubna\", nameArabic: \"لبنى\", nameBengali: \"লুবনা\", meaning: \"Storax tree\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Mahira\", nameArabic: \"ماهرة\", nameBengali: \"মাহিরা\", meaning: \"Skilled\", origin: \"Arabic\", gender: \"girl\", category: \"Skill\" },\n  { name: \"Malika\", nameArabic: \"ملكة\", nameBengali: \"মালিকা\", meaning: \"Queen\", origin: \"Arabic\", gender: \"girl\", category: \"Royalty\" },\n  { name: \"Mariam\", nameArabic: \"مريم\", nameBengali: \"মারিয়াম\", meaning: \"Mary\", origin: \"Hebrew\", gender: \"girl\", category: \"Prophetic\" },\n  { name: \"Nabila\", nameArabic: \"نبيلة\", nameBengali: \"নাবিলা\", meaning: \"Noble\", origin: \"Arabic\", gender: \"girl\", category: \"Nobility\" },\n  { name: \"Nadia\", nameArabic: \"نادية\", nameBengali: \"নাদিয়া\", meaning: \"Caller\", origin: \"Arabic\", gender: \"girl\", category: \"Communication\" },\n  { name: \"Naima\", nameArabic: \"نعيمة\", nameBengali: \"নাইমা\", meaning: \"Tranquil\", origin: \"Arabic\", gender: \"girl\", category: \"Peace\" },\n  { name: \"Najla\", nameArabic: \"نجلاء\", nameBengali: \"নাজলা\", meaning: \"Wide-eyed\", origin: \"Arabic\", gender: \"girl\", category: \"Beauty\" },\n  { name: \"Nashita\", nameArabic: \"نشيطة\", nameBengali: \"নাশিতা\", meaning: \"Energetic\", origin: \"Arabic\", gender: \"girl\", category: \"Energy\" },\n  { name: \"Qadira\", nameArabic: \"قادرة\", nameBengali: \"কাদিরা\", meaning: \"Capable\", origin: \"Arabic\", gender: \"girl\", category: \"Capability\" },\n  { name: \"Rabia\", nameArabic: \"رابعة\", nameBengali: \"রাবিয়া\", meaning: \"Spring\", origin: \"Arabic\", gender: \"girl\", category: \"Season\" },\n  { name: \"Rahma\", nameArabic: \"رحمة\", nameBengali: \"রহমা\", meaning: \"Mercy\", origin: \"Arabic\", gender: \"girl\", category: \"Mercy\" },\n  { name: \"Rania\", nameArabic: \"رانية\", nameBengali: \"রানিয়া\", meaning: \"Queen\", origin: \"Arabic\", gender: \"girl\", category: \"Royalty\" },\n  { name: \"Rashida\", nameArabic: \"رشيدة\", nameBengali: \"রশিদা\", meaning: \"Rightly guided\", origin: \"Arabic\", gender: \"girl\", category: \"Guidance\" },\n  { name: \"Sabah\", nameArabic: \"صباح\", nameBengali: \"সাবাহ\", meaning: \"Morning\", origin: \"Arabic\", gender: \"girl\", category: \"Time\" },\n  { name: \"Sabira\", nameArabic: \"صابرة\", nameBengali: \"সাবিরা\", meaning: \"Patient\", origin: \"Arabic\", gender: \"girl\", category: \"Patience\" },\n  { name: \"Sadiya\", nameArabic: \"سعدية\", nameBengali: \"সাদিয়া\", meaning: \"Lucky\", origin: \"Arabic\", gender: \"girl\", category: \"Fortune\" },\n  { name: \"Safia\", nameArabic: \"صافية\", nameBengali: \"সাফিয়া\", meaning: \"Pure\", origin: \"Arabic\", gender: \"girl\", category: \"Purity\" },\n  { name: \"Sahla\", nameArabic: \"سهلة\", nameBengali: \"সাহলা\", meaning: \"Easy\", origin: \"Arabic\", gender: \"girl\", category: \"Ease\" },\n  { name: \"Samira\", nameArabic: \"سميرة\", nameBengali: \"সামিরা\", meaning: \"Entertaining companion\", origin: \"Arabic\", gender: \"girl\", category: \"Friendship\" },\n  { name: \"Sarah\", nameArabic: \"سارة\", nameBengali: \"সারাহ\", meaning: \"Princess\", origin: \"Hebrew\", gender: \"girl\", category: \"Royalty\" },\n  { name: \"Shaima\", nameArabic: \"شيماء\", nameBengali: \"শায়মা\", meaning: \"Having good qualities\", origin: \"Arabic\", gender: \"girl\", category: \"Virtue\" },\n  { name: \"Sultana\", nameArabic: \"سلطانة\", nameBengali: \"সুলতানা\", meaning: \"Queen\", origin: \"Arabic\", gender: \"girl\", category: \"Royalty\" },\n  { name: \"Tahira\", nameArabic: \"طاهرة\", nameBengali: \"তাহিরা\", meaning: \"Pure\", origin: \"Arabic\", gender: \"girl\", category: \"Purity\" },\n  { name: \"Yasmin\", nameArabic: \"ياسمين\", nameBengali: \"ইয়াসমিন\", meaning: \"Jasmine flower\", origin: \"Persian\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Zahra\", nameArabic: \"زهراء\", nameBengali: \"জাহরা\", meaning: \"Flower\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Zara\", nameArabic: \"زارا\", nameBengali: \"জারা\", meaning: \"Blooming flower\", origin: \"Arabic\", gender: \"girl\", category: \"Nature\" },\n  { name: \"Zunira\", nameArabic: \"زنيرة\", nameBengali: \"জুনিরা\", meaning: \"Flower found in paradise\", origin: \"Arabic\", gender: \"girl\", category: \"Paradise\" }\n];\n\n// Export the complete Islamic names with auto-generated Bengali meanings\nexport const islamicNames: IslamicName[] = rawIslamicNames.map((rawName, index) => {\n  const id = rawName.id || `name-${index + 1}`;\n  const meaningBengali = rawName.meaningBengali || translateWithContext(\n    rawName.meaning, \n    rawName.name, \n    rawName.origin, \n    rawName.category\n  );\n\n  return {\n    id,\n    name: rawName.name,\n    nameArabic: rawName.nameArabic,\n    nameBengali: rawName.nameBengali,\n    meaning: rawName.meaning,\n    meaningBengali,\n    origin: rawName.origin,\n    gender: rawName.gender,\n    category: rawName.category || \"General\"\n  };\n});","size_bytes":25863},"client/src/data/quran-verses.ts":{"content":"export const quranVerses = [\n  {\n    surahNumber: 65,\n    verseNumber: 2,\n    arabic: \"وَمَن يَتَّقِ ٱللَّهَ يَجْعَل لَّهُۥ مَخْرَجًا\",\n    translation: \"And whoever fears Allah - He will make for him a way out.\",\n    transliteration: \"Wa man yattaqi Allaha yaj'al lahu makhrajan\",\n    surahName: \"At-Talaq\"\n  },\n  {\n    surahNumber: 2,\n    verseNumber: 255,\n    arabic: \"ٱللَّهُ لَآ إِلَـٰهَ إِلَّا هُوَ ٱلۡحَيُّ ٱلۡقَيُّومُۚ لَا تَأۡخُذُهُۥ سِنَةٞ وَلَا نَوۡمٞۚ\",\n    translation: \"Allah - there is no deity except Him, the Ever-Living, the Sustainer of existence. Neither drowsiness overtakes Him nor sleep.\",\n    transliteration: \"Allahu la ilaha illa huwa al-hayyu al-qayyum. La ta'khuzuhu sinatun wa la nawm.\",\n    surahName: \"Al-Baqarah\"\n  },\n  {\n    surahNumber: 1,\n    verseNumber: 1,\n    arabic: \"بِسۡمِ ٱللَّهِ ٱلرَّحۡمَـٰنِ ٱلرَّحِيمِ\",\n    translation: \"In the name of Allah, the Entirely Merciful, the Especially Merciful.\",\n    transliteration: \"Bismillahi ar-rahmani ar-raheem\",\n    surahName: \"Al-Fatiha\"\n  },\n  {\n    surahNumber: 3,\n    verseNumber: 26,\n    arabic: \"قُلِ ٱللَّهُمَّ مَـٰلِكَ ٱلۡمُلۡكِ تُؤۡتِي ٱلۡمُلۡكَ مَن تَشَآءُ وَتَنزِعُ ٱلۡمُلۡكَ مِمَّن تَشَآءُ\",\n    translation: \"Say, 'O Allah, Owner of Sovereignty, You give sovereignty to whom You will and You take sovereignty away from whom You will.'\",\n    transliteration: \"Quli allahumma malika al-mulki tu'ti al-mulka man tasha'u wa tanzi'u al-mulka mimman tasha'u\",\n    surahName: \"Ali 'Imran\"\n  }\n];\n","size_bytes":1730},"client/src/data/surahs.ts":{"content":"export interface Surah {\n  id: string;\n  number: number;\n  nameBengali: string;\n  nameArabic: string;\n  nameEnglish: string;\n  meaningBengali: string;\n  revelationType: \"মক্কী\" | \"মাদানী\";\n  numberOfAyahs: number;\n  fullText?: string;\n  transliteration?: string;\n  translation?: string;\n}\n\nexport const surahs: Surah[] = [\n  {\n    id: \"1\",\n    number: 1,\n    nameBengali: \"আল-ফাতিহা\",\n    nameArabic: \"الفاتحة\",\n    nameEnglish: \"Al-Fatihah\",\n    meaningBengali: \"সূচনা\",\n    revelationType: \"মক্কী\",\n    numberOfAyahs: 7,\n    fullText: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\nالْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ\\nالرَّحْمَٰنِ الرَّحِيمِ\\nمَالِكِ يَوْمِ الدِّينِ\\nإِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\\nاهْدِنَا الصِّرَاطَ الْمُسْتَقِيمَ\\nصِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ\",\n    transliteration: \"আলহামদু লিল্লাহি রব্বিল আলামীন। আর-রহমানির রহীম। মালিকি ইয়াওমিদ্দীন। ইয়্যাকা না'বুদু ওয়া ইয়্যাকা নাসতাঈন। ইহদিনাস সিরাতাল মুস্তাক্বীম। সিরাতাল্লাযীনা আন'আমতা আলাইহিম গাইরিল মাগদূবি আলাইহিম ওয়ালাদ্দোয়াল্লীন।\",\n    translation: \"পরম করুণাময় অসীম দয়ালু আল্লাহর নামে। সমস্ত প্রশংসা আল্লাহর, যিনি সৃষ্টিকুলের প্রতিপালক। পরম করুণাময়, অসীম দয়ালু। বিচার দিবসের মালিক। আমরা একমাত্র তোমারই ইবাদত করি এবং একমাত্র তোমারই সাহায্য প্রার্থনা করি। আমাদেরকে সরল পথ দেখাও। সে সকল লোকের পথ, যাদেরকে তুমি পুরস্কৃত করেছ। তাদের পথ নয়, যাদের প্রতি তোমার গজব নাযিল হয়েছে এবং যারা পথভ্রষ্ট হয়েছে।\"\n  },\n  {\n    id: \"112\",\n    number: 112,\n    nameBengali: \"আল-ইখলাস\",\n    nameArabic: \"الإخلاص\",\n    nameEnglish: \"Al-Ikhlas\",\n    meaningBengali: \"একনিষ্ঠতা\",\n    revelationType: \"মক্কী\",\n    numberOfAyahs: 4,\n    fullText: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\nقُلْ هُوَ اللَّهُ أَحَدٌ\\nاللَّهُ الصَّمَدُ\\nلَمْ يَلِدْ وَلَمْ يُولَدْ\\nوَلَمْ يَكُن لَّهُ كُفُوًا أَحَدٌ\",\n    transliteration: \"ক্বুল হুওয়াল্লাহু আহাদ। আল্লাহুস সমাদ। লাম ইয়ালিদ ওয়া লাম ইউলাদ। ওয়া লাম ইয়াকুল্লাহু কুফুওয়ান আহাদ।\",\n    translation: \"পরম করুণাময় অসীম দয়ালু আল্লাহর নামে। বলুন, তিনি আল্লাহ, এক। আল্লাহ অমুখাপেক্ষী। তিনি কাউকে জন্ম দেননি এবং কেউ তাঁকে জন্ম দেয়নি। এবং তাঁর সমতুল্য কেউ নেই।\"\n  },\n  {\n    id: \"113\",\n    number: 113,\n    nameBengali: \"আল-ফালাক\",\n    nameArabic: \"الفلق\",\n    nameEnglish: \"Al-Falaq\",\n    meaningBengali: \"ভোরবেলা\",\n    revelationType: \"মক্কী\",\n    numberOfAyahs: 5,\n    fullText: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\nقُلْ أَعُوذُ بِرَبِّ الْفَلَقِ\\nمِن شَرِّ مَا خَلَقَ\\nوَمِن شَرِّ غَاسِقٍ إِذَا وَقَبَ\\nوَمِن شَرِّ النَّفَّاثَاتِ فِي الْعُقَدِ\\nوَمِن شَرِّ حَاسِدٍ إِذَا حَسَدَ\",\n    transliteration: \"ক্বুল আউযু বিরব্বিল ফালাক্ব। মিন শাররি মা খলাক্ব। ওয়া মিন শাররি গাসিক্বিন ইযা ওয়াক্বাব। ওয়া মিন শাররিন নাফফাসাতি ফিল উক্বাদ। ওয়া মিন শাররি হাসিদিন ইযা হাসাদ।\",\n    translation: \"পরম করুণাময় অসীম দয়ালু আল্লাহর নামে। বলুন, আমি আশ্রয় চাই প্রভাতের রবের। তিনি যা সৃষ্টি করেছেন তার অনিষ্ট থেকে। এবং অন্ধকার রাতের অনিষ্ট থেকে যখন তা গভীর হয়। এবং গিরায় ফুঁ দেয়া জাদুকরীদের অনিষ্ট থেকে। এবং হিংসুকের অনিষ্ট থেকে যখন সে হিংসা করে।\"\n  },\n  {\n    id: \"114\",\n    number: 114,\n    nameBengali: \"আন-নাস\",\n    nameArabic: \"الناس\",\n    nameEnglish: \"An-Nas\",\n    meaningBengali: \"মানবজাতি\",\n    revelationType: \"মক্কী\",\n    numberOfAyahs: 6,\n    fullText: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\nقُلْ أَعُوذُ بِرَبِّ النَّاسِ\\nمَلِكِ النَّاسِ\\nإِلَٰهِ النَّاسِ\\nمِن شَرِّ الْوَسْوَاسِ الْخَنَّاسِ\\nالَّذِي يُوَسْوِسُ فِي صُدُورِ النَّاسِ\\nمِنَ الْجِنَّةِ وَالنَّاسِ\",\n    transliteration: \"ক্বুল আউযু বিরব্বিন নাস। মালিকিন নাস। ইলাহিন নাস। মিন শাররিল ওয়াসওয়াসিল খান্নাস। আল্লাযী ইউওয়াসবিসু ফি সুদূরিন নাস। মিনাল জিন্নাতি ওয়ান নাস।\",\n    translation: \"পরম করুণাময় অসীম দয়ালু আল্লাহর নামে। বলুন, আমি আশ্রয় চাই মানুষের রবের। মানুষের মালিকের। মানুষের মা'বুদের। তার অনিষ্ট থেকে যে কুমন্ত্রণা দেয় ও আত্মগোপন করে। যে কুমন্ত্রণা দেয় মানুষের অন্তরে। জিন ও মানুষের মধ্য থেকে।\"\n  },\n  {\n    id: \"109\",\n    number: 109,\n    nameBengali: \"আল-কাফিরুন\",\n    nameArabic: \"الكافرون\",\n    nameEnglish: \"Al-Kafirun\",\n    meaningBengali: \"অবিশ্বাসীরা\",\n    revelationType: \"মক্কী\",\n    numberOfAyahs: 6,\n    fullText: \"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\nقُلْ يَا أَيُّهَا الْكَافِرُونَ\\nلَا أَعْبُدُ مَا تَعْبُدُونَ\\nوَلَا أَنتُمْ عَابِدُونَ مَا أَعْبُدُ\\nوَلَا أَنَا عَابِدٌ مَّا عَبَدتُّمْ\\nوَلَا أَنتُمْ عَابِدُونَ مَا أَعْبُدُ\\nلَكُمْ دِينُكُمْ وَلِيَ دِينِ\",\n    transliteration: \"ক্বুল ইয়া আইয়্যুহাল কাফিরুন। লা আ'বুদু মা তা'বুদুন। ওয়ালা আনতুম আবিদুনা মা আ'বুদ। ওয়ালা আনা আবিদুম মা আবাদতুম। ওয়ালা আনতুম আবিদুনা মা আ'বুদ। লাকুম দীনুকুম ওয়ালিয়া দীন।\",\n    translation: \"পরম করুণাময় অসীম দয়ালু আল্লাহর নামে। বলুন, হে কাফেরগণ! আমি ইবাদত করি না, তোমরা যার ইবাদত কর। এবং তোমরা ইবাদতকারী নও, যার ইবাদত আমি করি। এবং আমি ইবাদতকারী নই, যার ইবাদত তোমরা কর। এবং তোমরা ইবাদতকারী নও, যার ইবাদত আমি করি। তোমাদের দ্বীন তোমাদের জন্য এবং আমার দ্বীন আমার জন্য।\"\n  }\n];\n","size_bytes":9455},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/islamic-calendar.ts":{"content":"export function getHijriDate(date: Date): string {\n  // Simple Hijri calendar conversion (approximation)\n  // In a real app, you'd use a proper Islamic calendar library\n  \n  const gregorianYear = date.getFullYear();\n  const gregorianMonth = date.getMonth() + 1;\n  const gregorianDay = date.getDate();\n  \n  // Approximate conversion (this is not accurate for production use)\n  const hijriYear = Math.floor((gregorianYear - 622) * 1.030684) + 1;\n  const hijriMonthNames = [\n    \"Muharram\", \"Safar\", \"Rabi' al-awwal\", \"Rabi' al-thani\",\n    \"Jumada al-awwal\", \"Jumada al-thani\", \"Rajab\", \"Sha'ban\",\n    \"Ramadan\", \"Shawwal\", \"Dhu al-Qi'dah\", \"Dhu al-Hijjah\"\n  ];\n  \n  // Simple month calculation (not accurate)\n  const hijriMonth = ((gregorianMonth - 1 + Math.floor(gregorianDay / 29)) % 12);\n  const hijriDay = ((gregorianDay - 1) % 29) + 1;\n  \n  return `${hijriDay} ${hijriMonthNames[hijriMonth]} ${hijriYear}`;\n}\n\nexport function getGregorianFromHijri(hijriDateString: string): Date {\n  // Simple reverse conversion (approximation)\n  // This is a placeholder implementation\n  return new Date();\n}\n\nexport function isImportantIslamicDate(hijriDate: string): boolean {\n  const importantDates = [\n    \"1 Muharram\", // Islamic New Year\n    \"10 Muharram\", // Day of Ashura\n    \"12 Rabi' al-awwal\", // Mawlid al-Nabi\n    \"27 Rajab\", // Isra and Mi'raj\n    \"1 Ramadan\", // First day of Ramadan\n    \"27 Ramadan\", // Laylat al-Qadr\n    \"1 Shawwal\", // Eid al-Fitr\n    \"10 Dhu al-Hijjah\", // Eid al-Adha\n  ];\n  \n  return importantDates.some(date => hijriDate.includes(date));\n}\n","size_bytes":1567},"client/src/lib/prayer-times.ts":{"content":"export interface Prayer {\n  name: string;\n  time: string;\n  icon: any;\n}\n\nexport function calculateNextPrayer(prayers: Prayer[]) {\n  const now = new Date();\n  const currentTime = now.getHours() * 60 + now.getMinutes();\n  \n  // Convert prayer times to minutes\n  const prayerMinutes = prayers.map(prayer => {\n    const [hours, minutes] = prayer.time.split(':').map(Number);\n    return {\n      ...prayer,\n      minutes: hours * 60 + minutes\n    };\n  });\n  \n  // Find current and next prayer\n  let currentPrayer = null;\n  let nextPrayer = null;\n  let timeRemaining = 0;\n  \n  for (let i = 0; i < prayerMinutes.length; i++) {\n    const prayer = prayerMinutes[i];\n    const nextIndex = (i + 1) % prayerMinutes.length;\n    const nextPrayerTime = prayerMinutes[nextIndex];\n    \n    // Check if current time is between this prayer and next\n    if (i === prayerMinutes.length - 1) {\n      // Last prayer of the day\n      if (currentTime >= prayer.minutes) {\n        currentPrayer = prayer;\n        nextPrayer = prayerMinutes[0]; // First prayer of next day\n        timeRemaining = (24 * 60) - currentTime + nextPrayer.minutes;\n      }\n    } else {\n      if (currentTime >= prayer.minutes && currentTime < nextPrayerTime.minutes) {\n        currentPrayer = prayer;\n        nextPrayer = nextPrayerTime;\n        timeRemaining = nextPrayerTime.minutes - currentTime;\n        break;\n      }\n    }\n  }\n  \n  // If no current prayer found, we're before the first prayer\n  if (!currentPrayer && !nextPrayer) {\n    nextPrayer = prayerMinutes[0];\n    timeRemaining = prayerMinutes[0].minutes - currentTime;\n  }\n  \n  return { currentPrayer, nextPrayer, timeRemaining };\n}\n\nexport function formatTimeRemaining(minutes: number): string {\n  if (minutes < 0) return \"0m\";\n  \n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  \n  if (hours > 0) {\n    return `${hours}h ${mins}m`;\n  }\n  return `${mins}m`;\n}\n","size_bytes":1900},"client/src/lib/qibla.ts":{"content":"export function calculateQiblaDirection(latitude: number, longitude: number): number {\n  // Kaaba coordinates\n  const kaabaLat = 21.422487;\n  const kaabaLng = 39.826206;\n  \n  // Convert to radians\n  const dLng = (kaabaLng - longitude) * Math.PI / 180;\n  const lat1Rad = latitude * Math.PI / 180;\n  const lat2Rad = kaabaLat * Math.PI / 180;\n  \n  const y = Math.sin(dLng) * Math.cos(lat2Rad);\n  const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - \n            Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLng);\n  \n  let bearing = Math.atan2(y, x) * 180 / Math.PI;\n  bearing = (bearing + 360) % 360;\n  \n  return bearing;\n}\n\nexport function calculateDistanceToKaaba(latitude: number, longitude: number): number {\n  const kaabaLat = 21.422487;\n  const kaabaLng = 39.826206;\n  \n  const R = 6371; // Earth's radius in km\n  const dLat = (kaabaLat - latitude) * Math.PI / 180;\n  const dLng = (kaabaLng - longitude) * Math.PI / 180;\n  \n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(latitude * Math.PI / 180) * Math.cos(kaabaLat * Math.PI / 180) *\n            Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  \n  return R * c;\n}\n\nexport function getCompassDirection(bearing: number): string {\n  const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', \n                     'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n  const index = Math.round(bearing / 22.5) % 16;\n  return directions[index];\n}\n","size_bytes":1481},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport TopBar from \"@/components/top-bar\";\nimport { Calendar, Star } from \"lucide-react\";\nimport { getHijriDate, getGregorianFromHijri } from \"@/lib/islamic-calendar\";\nimport type { IslamicEvent } from \"@shared/schema\";\n\nexport default function CalendarPage() {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  const { data: events } = useQuery<IslamicEvent[]>({\n    queryKey: [\"/api/islamic-events\"],\n  });\n\n  const hijriDate = getHijriDate(selectedDate);\n  const currentDate = new Date();\n  const currentHijriDate = getHijriDate(currentDate);\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <TopBar title=\"Islamic Calendar\" subtitle=\"Hijri dates and Islamic events\" />\n\n      <main className=\"flex-1 overflow-y-auto p-4 pb-20 space-y-6\">\n        {/* Current Date Display */}\n        <Card data-testid=\"card-current-date\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl text-primary\">{currentHijriDate}</CardTitle>\n            <p className=\"text-muted-foreground\">\n              {currentDate.toLocaleDateString('en-US', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </p>\n          </CardHeader>\n        </Card>\n\n        {/* Important Islamic Events */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-lg font-semibold flex items-center\">\n            <Star className=\"mr-2 text-accent\" />\n            Important Events\n          </h2>\n          \n          {events && events.length > 0 ? (\n            <div className=\"space-y-3\">\n              {events.map((event) => (\n                <Card key={event.id} data-testid={`card-event-${event.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h3 className=\"font-semibold\">{event.title}</h3>\n                      {event.isImportant && (\n                        <Badge variant=\"secondary\" data-testid=\"badge-important\">\n                          Important\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {event.description}\n                    </p>\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span data-testid={`text-hijri-${event.id}`}>{event.hijriDate}</span>\n                      <span data-testid={`text-gregorian-${event.id}`}>\n                        {new Date(event.gregorianDate).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center text-muted-foreground\">\n                <Calendar className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p>No events loaded</p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Calendar Conversion Tool */}\n        <Card data-testid=\"card-conversion\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Date Conversion</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <p className=\"text-sm font-medium\">Today (Gregorian)</p>\n                <p className=\"text-lg\" data-testid=\"text-gregorian-today\">\n                  {currentDate.toLocaleDateString('en-US', { \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })}\n                </p>\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <p className=\"text-sm font-medium\">Today (Hijri)</p>\n                <p className=\"text-lg font-semibold text-primary\" data-testid=\"text-hijri-today\">\n                  {currentHijriDate}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <BottomNavigation currentPage=\"calendar\" />\n    </div>\n  );\n}\n","size_bytes":4643},"client/src/pages/dua.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { BookOpen } from \"lucide-react\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { duas, Dua } from \"@/data/duas\";\n\nexport default function DuaPage() {\n  const [selectedDua, setSelectedDua] = useState<Dua | null>(null);\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <div className=\"flex-1 overflow-hidden pb-16\">\n        <ScrollArea className=\"h-full\">\n          <div className=\"p-4 space-y-4\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-14 h-14 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n                <BookOpen className=\"w-7 h-7 text-emerald-950\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-black text-amber-400\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>দোয়া সমূহ</h1>\n                <p className=\"text-sm text-emerald-100 font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>আরবি • বাংলা উচ্চারণ • বাংলা অর্থ</p>\n              </div>\n            </div>\n\n            {selectedDua && (\n              <Card className=\"bg-[#0E3B1A] border border-[#1D5E2D] shadow-[0_10px_30px_rgba(0,0,0,0.35)] rounded-3xl overflow-hidden max-w-[420px] mx-auto\" data-testid=\"dua-card\">\n              <div className=\"bg-gradient-to-b from-[#125022] to-[#0E3B1A] p-6 space-y-5\">\n                <div className=\"text-center relative\">\n                  <p className=\"text-white text-xl font-bold mb-4\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em' }}>\n                    বিসমিল্লাহির রহমানির রহীম\n                  </p>\n                  <div className=\"w-[72px] h-[72px] mx-auto mb-4 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-[0_4px_12px_rgba(0,0,0,0.3)]\">\n                    <span className=\"text-3xl font-black text-emerald-950\" data-testid=\"dua-number\">\n                      {duas.findIndex(d => d.id === selectedDua.id) + 1}\n                    </span>\n                  </div>\n                  <h2 className=\"text-[28px] font-black text-amber-400 mb-2 leading-tight\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", textShadow: '0 2px 8px rgba(251,191,36,0.3)', letterSpacing: '-0.01em' }} data-testid=\"dua-title-bengali\">\n                    {selectedDua.titleBengali}\n                  </h2>\n                  <p className=\"text-sm text-emerald-200 mb-3 uppercase tracking-wide font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }} data-testid=\"dua-category\">\n                    {selectedDua.category}\n                  </p>\n                </div>\n\n                <div \n                  className=\"text-center p-6 rounded-2xl bg-[#0E3B1A] shadow-[inset_0_2px_8px_rgba(0,0,0,0.3)]\"\n                  style={{ direction: 'rtl', fontFamily: \"'Noto Naskh Arabic', serif\", fontFeatureSettings: \"'liga' 1\" }}\n                  data-testid=\"dua-arabic\"\n                >\n                  <p className=\"text-[30px] leading-[1.6] text-white font-normal antialiased\">\n                    {selectedDua.arabic}\n                  </p>\n                </div>\n\n                <div className=\"p-7 rounded-2xl bg-[#0E3B1A] shadow-[inset_0_2px_8px_rgba(0,0,0,0.3)]\" data-testid=\"dua-transliteration\">\n                  <p className=\"text-2xl font-bold text-white mb-5 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em' }}>বিসমিল্লাহির রহমানির রহীম</p>\n                  <div className=\"my-5\"></div>\n                  <p className=\"font-black text-lg text-amber-400 mb-5 border-b border-amber-400/30 pb-3 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>বাংলা উচ্চারণ:</p>\n                  <p className=\"text-xl text-white leading-loose font-bold text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em', lineHeight: '2.2' }}>\n                    {selectedDua.transliteration}\n                  </p>\n                </div>\n\n                <div className=\"p-7 rounded-2xl bg-[#0F4220]\" data-testid=\"dua-meaning\">\n                  <p className=\"font-black text-lg text-amber-400 mb-5 border-b border-amber-400/30 pb-3 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>বাংলা অর্থ:</p>\n                  <p className=\"text-lg text-[#F5FAD7] leading-loose font-semibold text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em', lineHeight: '2' }}>\n                    {selectedDua.meaningBengali}\n                  </p>\n                </div>\n              </div>\n            </Card>\n            )}\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              {duas.map((dua) => (\n                <Card\n                  key={dua.id}\n                  className={`p-3 cursor-pointer transition-all ${\n                    selectedDua?.id === dua.id\n                      ? 'bg-amber-400/20 border-2 border-amber-400'\n                      : 'bg-emerald-900/30 border border-amber-400/10 hover:border-amber-400/30'\n                  }`}\n                  onClick={() => setSelectedDua(dua)}\n                  data-testid={`dua-item-${dua.id}`}\n                >\n                  <div className=\"space-y-2\">\n                    <p className=\"text-xs text-amber-300/80 font-semibold uppercase tracking-wide\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>\n                      {dua.category}\n                    </p>\n                    <p className=\"text-sm font-bold text-amber-400 line-clamp-2\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>\n                      {dua.titleBengali}\n                    </p>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n\n      <BottomNavigation currentPage=\"dua\" />\n    </div>\n  );\n}\n","size_bytes":6349},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport PrayerTimes from \"@/components/prayer-times\";\nimport QiblaCompass from \"@/components/qibla-compass\";\nimport DhikrCounter from \"@/components/dhikr-counter\";\nimport IslamicCalendar from \"@/components/islamic-calendar\";\nimport QuranVerse from \"@/components/quran-verse\";\nimport DailyQuiz from \"@/components/daily-quiz\";\nimport AsmaUlHusna from \"@/components/asma-ul-husna\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport TopBar from \"@/components/top-bar\";\nimport { getHijriDate } from \"@/lib/islamic-calendar\";\n\nexport default function HomePage() {\n  const [location, setLocation] = useState<{ city: string; latitude: number; longitude: number } | null>(null);\n\n  useEffect(() => {\n    // Get user location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            city: \"Current Location\",\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        () => {\n          // Default to New York if geolocation fails\n          setLocation({\n            city: \"New York, NY\",\n            latitude: 40.7128,\n            longitude: -74.0060\n          });\n        }\n      );\n    } else {\n      setLocation({\n        city: \"New York, NY\",\n        latitude: 40.7128,\n        longitude: -74.0060\n      });\n    }\n  }, []);\n\n  const hijriDate = getHijriDate(new Date());\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900 overflow-hidden\">\n      <TopBar subtitle={location?.city || \"Loading...\"} />\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto pb-20 scrollbar-thin scrollbar-thumb-emerald-700 scrollbar-track-transparent\">\n        <div className=\"max-w-2xl mx-auto\">\n          {location && (\n            <>\n              <PrayerTimes latitude={location.latitude} longitude={location.longitude} />\n              <QiblaCompass latitude={location.latitude} longitude={location.longitude} />\n            </>\n          )}\n          \n          <section className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <DhikrCounter />\n              <IslamicCalendar />\n            </div>\n          </section>\n\n          <QuranVerse />\n          <DailyQuiz />\n          <AsmaUlHusna />\n        </div>\n      </main>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}\n","size_bytes":2537},"client/src/pages/names.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport TopBar from \"@/components/top-bar\";\nimport { Search, Heart, Share, Baby, Languages, Sparkles, Filter, TrendingUp } from \"lucide-react\";\nimport type { IslamicName } from \"@shared/schema\";\n\nconst API_URL =\n  import.meta.env.VITE_API_URL || \"https://islamicguide-qqag.onrender.com\";\n\nexport default function NamesPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedGender, setSelectedGender] = useState<\"all\" | \"boy\" | \"girl\">(\"all\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [selectedLanguage, setSelectedLanguage] = useState<\"english\" | \"arabic\" | \"bengali\">(\"bengali\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: allNames, isLoading } = useQuery<IslamicName[]>({\n    queryKey: [\"allNames\", selectedGender, selectedCategory],\n    queryFn: async () => {\n      const res = await fetch(\n        `${API_URL}/api/islamic-names?gender=${selectedGender}&category=${encodeURIComponent(selectedCategory)}`\n      );\n      if (!res.ok) throw new Error(\"Failed to fetch names\");\n      return res.json();\n    },\n  });\n\n  const { data: searchResults, refetch: searchNames } = useQuery<IslamicName[]>({\n    queryKey: [\"searchNames\", searchQuery, selectedGender],\n    queryFn: async () => {\n      const res = await fetch(\n        `${API_URL}/api/islamic-names/search?q=${encodeURIComponent(searchQuery)}&gender=${selectedGender}`\n      );\n      if (!res.ok) throw new Error(\"Search failed\");\n      return res.json();\n    },\n    enabled: false,\n  });\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      searchNames();\n    }\n  };\n\n  const handleShare = (name: IslamicName) => {\n    if (navigator.share) {\n      navigator.share({\n        title: `Islamic Name: ${name.name}`,\n        text: `${name.name} (${name.gender})\\nMeaning: ${name.meaning}\\nOrigin: ${name.origin}\\n\\nFrom Islamic Names App`,\n      });\n    }\n  };\n\n  const categories = [\n    \"All\", \"Popular\", \"Prophetic\", \"Historical\", \"Virtue\", \"Divine\",\n    \"Nature\", \"Beauty\", \"Spiritual\", \"Companion\", \"Leadership\",\n    \"Knowledge\", \"Wisdom\", \"Joy\", \"Royal\", \"Precious\"\n  ];\n\n  const displayNames = searchQuery.trim() && searchResults ? searchResults : allNames || [];\n  const boyNames = displayNames.filter(name => name.gender === 'boy');\n  const girlNames = displayNames.filter(name => name.gender === 'girl');\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-br from-emerald-950 via-emerald-900 to-teal-950\">\n      <TopBar title=\"Islamic Baby Names\" subtitle=\"Beautiful names with meanings\" />\n\n      <main className=\"flex-1 overflow-y-auto p-4 pb-20 space-y-6\">\n        {/* Premium Hero Section with Stats */}\n        <div className=\"relative overflow-hidden rounded-2xl bg-gradient-to-r from-amber-500/20 via-emerald-500/20 to-teal-500/20 backdrop-blur-sm border border-amber-500/30 p-6 mb-6\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-amber-500/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-0 left-0 w-40 h-40 bg-teal-500/10 rounded-full blur-3xl\"></div>\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Sparkles className=\"h-5 w-5 text-amber-400\" />\n              <h2 className=\"text-xl font-bold text-amber-100\">Discover Beautiful Names</h2>\n            </div>\n            <p className=\"text-sm text-emerald-100/80 mb-4\">\n              Explore thousands of meaningful Islamic names for your baby\n            </p>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 text-center\">\n                <div className=\"text-2xl font-bold text-amber-400\">{allNames?.length || 0}</div>\n                <div className=\"text-xs text-emerald-100/70\">Total Names</div>\n              </div>\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 text-center\">\n                <div className=\"text-2xl font-bold text-blue-400\">{boyNames.length}</div>\n                <div className=\"text-xs text-emerald-100/70\">Boys</div>\n              </div>\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 text-center\">\n                <div className=\"text-2xl font-bold text-pink-400\">{girlNames.length}</div>\n                <div className=\"text-xs text-emerald-100/70\">Girls</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Premium Search Bar */}\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-amber-500/20 to-teal-500/20 rounded-xl blur-xl\"></div>\n            <div className=\"relative flex gap-2 bg-white/10 backdrop-blur-md rounded-xl p-2 border border-white/20\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-emerald-300\" />\n                <Input\n                  placeholder=\"Search names or meanings...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                  className=\"pl-10 bg-white/5 border-white/10 text-white placeholder:text-emerald-200/50 focus:bg-white/10\"\n                  data-testid=\"input-search-names\"\n                />\n              </div>\n              <Button \n                onClick={handleSearch} \n                className=\"bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white shadow-lg\"\n                data-testid=\"button-search-names\"\n              >\n                <Search className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                onClick={() => setShowFilters(!showFilters)}\n                variant=\"outline\"\n                className=\"border-white/20 bg-white/5 hover:bg-white/10 text-white\"\n                data-testid=\"button-toggle-filters\"\n              >\n                <Filter className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Advanced Filters */}\n          {showFilters && (\n            <div className=\"space-y-3 bg-white/5 backdrop-blur-md rounded-xl p-4 border border-white/10 animate-in slide-in-from-top-2\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"text-xs text-emerald-200 mb-1.5 block\">Category</label>\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger \n                      className=\"bg-white/5 border-white/10 text-white\"\n                      data-testid=\"select-category\"\n                    >\n                      <SelectValue placeholder=\"Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-xs text-emerald-200 mb-1.5 block\">Gender</label>\n                  <Select value={selectedGender} onValueChange={(value: \"all\" | \"boy\" | \"girl\") => setSelectedGender(value)}>\n                    <SelectTrigger \n                      className=\"bg-white/5 border-white/10 text-white\"\n                      data-testid=\"select-gender\"\n                    >\n                      <SelectValue placeholder=\"Gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Names</SelectItem>\n                      <SelectItem value=\"boy\">Boys Only</SelectItem>\n                      <SelectItem value=\"girl\">Girls Only</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-emerald-200 mb-1.5 block flex items-center gap-1\">\n                  <Languages className=\"h-3 w-3\" />\n                  Display Language\n                </label>\n                <Select value={selectedLanguage} onValueChange={(value: \"english\" | \"arabic\" | \"bengali\") => setSelectedLanguage(value)}>\n                  <SelectTrigger \n                    className=\"bg-white/5 border-white/10 text-white\"\n                    data-testid=\"select-language\"\n                  >\n                    <SelectValue placeholder=\"Language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"english\">English</SelectItem>\n                    <SelectItem value=\"arabic\">العربية (Arabic)</SelectItem>\n                    <SelectItem value=\"bengali\">বাংলা (Bengali)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Results Summary */}\n        {!isLoading && (\n          <div className=\"flex items-center justify-center gap-2 text-sm text-emerald-200/80 bg-white/5 rounded-lg py-2 px-4 backdrop-blur-sm\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>\n              {displayNames.length} names found\n              {selectedGender !== 'all' && ` • ${selectedGender}s`}\n              {selectedCategory !== 'All' && ` • ${selectedCategory}`}\n            </span>\n          </div>\n        )}\n\n        {/* Names Display */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-48 bg-white/5 rounded-xl backdrop-blur-sm\"></div>\n              </div>\n            ))}\n          </div>\n        ) : selectedGender === 'all' ? (\n          <Tabs defaultValue=\"boys\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-white/10 backdrop-blur-md p-1 h-auto\">\n              <TabsTrigger \n                value=\"boys\" \n                className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-blue-600 data-[state=active]:text-white rounded-lg py-3\"\n                data-testid=\"tab-boys\"\n              >\n                <Baby className=\"h-4 w-4 mr-2\" />\n                Boys ({boyNames.length})\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"girls\" \n                className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-500 data-[state=active]:to-pink-600 data-[state=active]:text-white rounded-lg py-3\"\n                data-testid=\"tab-girls\"\n              >\n                <Baby className=\"h-4 w-4 mr-2\" />\n                Girls ({girlNames.length})\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"boys\" className=\"mt-6\">\n              {boyNames.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {boyNames.map((name) => (\n                    <NameCard key={name.id} name={name} selectedLanguage={selectedLanguage} onShare={handleShare} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16 bg-white/5 rounded-xl backdrop-blur-sm\">\n                  <Baby className=\"h-16 w-16 text-emerald-500/50 mx-auto mb-4\" />\n                  <p className=\"text-emerald-200/60\">No boy names found</p>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"girls\" className=\"mt-6\">\n              {girlNames.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {girlNames.map((name) => (\n                    <NameCard key={name.id} name={name} selectedLanguage={selectedLanguage} onShare={handleShare} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16 bg-white/5 rounded-xl backdrop-blur-sm\">\n                  <Baby className=\"h-16 w-16 text-pink-500/50 mx-auto mb-4\" />\n                  <p className=\"text-emerald-200/60\">No girl names found</p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {displayNames.length > 0 ? (\n              displayNames.map((name) => (\n                <NameCard key={name.id} name={name} selectedLanguage={selectedLanguage} onShare={handleShare} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-16 bg-white/5 rounded-xl backdrop-blur-sm\">\n                <Baby className=\"h-16 w-16 text-emerald-500/50 mx-auto mb-4\" />\n                <p className=\"text-emerald-200/60\">No names found</p>\n              </div>\n            )}\n          </div>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"names\" />\n    </div>\n  );\n}\n\ninterface NameCardProps {\n  name: IslamicName;\n  selectedLanguage: \"english\" | \"arabic\" | \"bengali\";\n  onShare: (name: IslamicName) => void;\n}\n\nfunction NameCard({ name, selectedLanguage, onShare }: NameCardProps) {\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  const getDisplayName = () => {\n    switch (selectedLanguage) {\n      case \"arabic\":\n        return name.nameArabic;\n      case \"bengali\":\n        return name.nameBengali;\n      default:\n        return name.name;\n    }\n  };\n\n  const getDisplayMeaning = () => {\n    switch (selectedLanguage) {\n      case \"bengali\":\n        return name.meaningBengali || name.meaning;\n      default:\n        return name.meaning;\n    }\n  };\n\n  const getNameClass = () => {\n    if (selectedLanguage === \"arabic\") {\n      return \"text-2xl font-bold text-right\";\n    }\n    return \"text-2xl font-bold\";\n  };\n\n  const genderColor = name.gender === 'boy' \n    ? 'from-blue-500/20 to-blue-600/20 border-blue-500/30' \n    : 'from-pink-500/20 to-pink-600/20 border-pink-500/30';\n\n  const genderBadgeColor = name.gender === 'boy'\n    ? 'bg-blue-500/20 text-blue-300 border-blue-500/30'\n    : 'bg-pink-500/20 text-pink-300 border-pink-500/30';\n\n  return (\n    <Card \n      className={`group relative overflow-hidden bg-gradient-to-br ${genderColor} backdrop-blur-md border hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] hover:border-white/30`}\n      data-testid={`card-name-${name.name.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <div className=\"absolute top-0 right-0 w-24 h-24 bg-white/5 rounded-full blur-2xl group-hover:bg-white/10 transition-all\"></div>\n      \n      <CardContent className=\"p-5 relative z-10\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-start gap-3 mb-2\">\n              <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-gradient-to-br from-amber-400/20 to-amber-600/20 flex items-center justify-center border border-amber-500/30\">\n                <Baby className={`h-6 w-6 ${name.gender === 'boy' ? 'text-blue-400' : 'text-pink-400'}`} />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className={`${getNameClass()} bg-gradient-to-r from-amber-200 to-amber-100 bg-clip-text text-transparent`} data-testid={`text-name-${name.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {getDisplayName()}\n                </h3>\n                {selectedLanguage !== \"english\" && (\n                  <p className=\"text-sm text-emerald-200/60 mt-1\">\n                    {name.name}\n                  </p>\n                )}\n              </div>\n            </div>\n            <Badge \n              className={`${genderBadgeColor} border font-medium`}\n              data-testid={`badge-gender-${name.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {name.gender === 'boy' ? '👦 Boy' : '👧 Girl'}\n            </Badge>\n          </div>\n          <div className=\"flex space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsFavorite(!isFavorite)}\n              className=\"hover:bg-white/10 hover:scale-110 transition-all\"\n              data-testid={`button-favorite-${name.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Heart className={`h-4 w-4 transition-all ${isFavorite ? 'fill-red-500 text-red-500 scale-110' : 'text-emerald-200'}`} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onShare(name)}\n              className=\"hover:bg-white/10 hover:scale-110 transition-all\"\n              data-testid={`button-share-${name.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Share className=\"h-4 w-4 text-emerald-200\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3 bg-white/5 rounded-lg p-4 backdrop-blur-sm\">\n          <div className=\"flex items-start gap-2\">\n            <div className=\"w-1.5 h-1.5 rounded-full bg-amber-400 mt-2 flex-shrink-0\"></div>\n            <div>\n              <span className=\"text-xs font-semibold text-amber-300 uppercase tracking-wider\">Meaning</span>\n              <p className=\"text-sm text-emerald-100 leading-relaxed mt-1\">\n                {getDisplayMeaning()}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start gap-2\">\n            <div className=\"w-1.5 h-1.5 rounded-full bg-teal-400 mt-2 flex-shrink-0\"></div>\n            <div>\n              <span className=\"text-xs font-semibold text-teal-300 uppercase tracking-wider\">Origin</span>\n              <p className=\"text-sm text-emerald-100 leading-relaxed mt-1\">\n                {name.origin}\n              </p>\n            </div>\n          </div>\n          \n          {name.category && (\n            <div className=\"pt-2\">\n              <Badge className=\"bg-gradient-to-r from-emerald-500/20 to-teal-500/20 text-emerald-200 border-emerald-500/30 text-xs\">\n                <Sparkles className=\"h-3 w-3 mr-1\" />\n                {name.category}\n              </Badge>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":19046},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/qibla.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport QiblaCompass from \"@/components/qibla-compass\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport TopBar from \"@/components/top-bar\";\n\nexport default function QiblaPage() {\n  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        () => {\n          setLocation({\n            latitude: 40.7128,\n            longitude: -74.0060\n          });\n        }\n      );\n    } else {\n      setLocation({\n        latitude: 40.7128,\n        longitude: -74.0060\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <TopBar title=\"Qibla Direction\" subtitle=\"Find the direction to Kaaba\" />\n\n      <main className=\"flex-1 p-4 pb-20 flex items-center justify-center\">\n        {location ? (\n          <QiblaCompass latitude={location.latitude} longitude={location.longitude} standalone />\n        ) : (\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground\">Loading location...</p>\n          </div>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"qibla\" />\n    </div>\n  );\n}\n","size_bytes":1482},"client/src/pages/quran.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport TopBar from \"@/components/top-bar\";\nimport { Search, BookOpen, Share } from \"lucide-react\";\nimport type { QuranVerse } from \"@shared/schema\";\n\nexport default function QuranPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: randomVerse } = useQuery<QuranVerse>({\n    queryKey: [\"/api/quran/random\"],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: searchResults, refetch: searchVerses } = useQuery<QuranVerse[]>({\n    queryKey: [\"/api/quran/search\", searchQuery],\n    enabled: false,\n  });\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      searchVerses();\n    }\n  };\n\n  const handleShare = (verse: QuranVerse) => {\n    if (navigator.share) {\n      navigator.share({\n        title: `Quran ${verse.surahName} ${verse.surahNumber}:${verse.verseNumber}`,\n        text: `${verse.arabic}\\n\\n\"${verse.translation}\"\\n\\n- Quran ${verse.surahNumber}:${verse.verseNumber}`,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <TopBar title=\"Holy Quran\" subtitle=\"Read and search verses\" />\n\n      <main className=\"flex-1 overflow-y-auto p-4 pb-20 space-y-6\">\n        {/* Search Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Search verses...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              data-testid=\"input-search\"\n            />\n            <Button onClick={handleSearch} data-testid=\"button-search\">\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {searchResults && searchResults.length > 0 && (\n            <div className=\"space-y-3\">\n              <h2 className=\"text-lg font-semibold\">Search Results</h2>\n              {searchResults.map((verse) => (\n                <Card key={`${verse.surahNumber}-${verse.verseNumber}`} data-testid={`card-verse-${verse.surahNumber}-${verse.verseNumber}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-right mb-3 text-xl font-semibold leading-relaxed\" style={{ fontFamily: 'Times New Roman, serif' }}>\n                      {verse.arabic}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground mb-2\">\n                      \"{verse.translation}\"\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {verse.surahName} {verse.surahNumber}:{verse.verseNumber}\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleShare(verse)}\n                        data-testid={`button-share-${verse.surahNumber}-${verse.verseNumber}`}\n                      >\n                        <Share className=\"h-3 w-3 mr-1\" />\n                        Share\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {searchResults && searchResults.length === 0 && searchQuery && (\n            <p className=\"text-muted-foreground text-center py-4\">No verses found for \"{searchQuery}\"</p>\n          )}\n        </div>\n\n        {/* Random Verse Section */}\n        {randomVerse && (\n          <div className=\"space-y-4\">\n            <h2 className=\"text-lg font-semibold flex items-center\">\n              <BookOpen className=\"mr-2\" />\n              Featured Verse\n            </h2>\n            <Card data-testid=\"card-random-verse\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-right mb-4 text-2xl font-semibold leading-relaxed\" style={{ fontFamily: 'Times New Roman, serif' }}>\n                  {randomVerse.arabic}\n                </div>\n                <div className=\"text-sm text-muted-foreground mb-2\">\n                  \"{randomVerse.translation}\"\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {randomVerse.surahName} {randomVerse.surahNumber}:{randomVerse.verseNumber}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleShare(randomVerse)}\n                    data-testid=\"button-share-random\"\n                  >\n                    <Share className=\"h-3 w-3 mr-1\" />\n                    Share\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"quran\" />\n    </div>\n  );\n}\n","size_bytes":5276},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport TopBar from \"@/components/top-bar\";\nimport { Settings as SettingsIcon, Bell, MapPin, Calculator, Palette, Download, Smartphone } from \"lucide-react\";\n\nexport default function SettingsPage() {\n  const [notifications, setNotifications] = useState(true);\n  const [calculationMethod, setCalculationMethod] = useState(\"ISNA\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handler);\n\n    return () => window.removeEventListener('beforeinstallprompt', handler);\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) {\n      alert('Installation not available. You may have already installed the app or your browser does not support installation.');\n      return;\n    }\n\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n    }\n  };\n\n  const handleDownloadAPK = () => {\n    const currentUrl = window.location.origin;\n    const downloadUrl = `/download/apk`;\n    window.open(downloadUrl, '_blank');\n  };\n\n  const calculationMethods = [\n    { value: \"ISNA\", label: \"Islamic Society of North America (ISNA)\" },\n    { value: \"MWL\", label: \"Muslim World League\" },\n    { value: \"EGYPT\", label: \"Egyptian General Authority of Survey\" },\n    { value: \"MAKKAH\", label: \"Umm Al-Qura University, Makkah\" },\n    { value: \"KARACHI\", label: \"University of Islamic Sciences, Karachi\" },\n  ];\n\n  const handleLocationPermission = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        () => alert(\"Location permission granted\"),\n        () => alert(\"Location permission denied\")\n      );\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <TopBar title=\"Settings\" subtitle=\"Customize your Islamic companion\" />\n\n      <main className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n        {/* Prayer Times Settings */}\n        <Card data-testid=\"card-prayer-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calculator className=\"mr-2 h-5 w-5\" />\n              Prayer Times\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"calculation-method\">Calculation Method</Label>\n              <Select value={calculationMethod} onValueChange={setCalculationMethod}>\n                <SelectTrigger id=\"calculation-method\" data-testid=\"select-calculation-method\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {calculationMethods.map((method) => (\n                    <SelectItem key={method.value} value={method.value}>\n                      {method.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications Settings */}\n        <Card data-testid=\"card-notification-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Bell className=\"mr-2 h-5 w-5\" />\n              Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"prayer-notifications\">Prayer Time Notifications</Label>\n              <Switch\n                id=\"prayer-notifications\"\n                checked={notifications}\n                onCheckedChange={setNotifications}\n                data-testid=\"switch-notifications\"\n              />\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Get notified when it's time for prayer\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Location Settings */}\n        <Card data-testid=\"card-location-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"mr-2 h-5 w-5\" />\n              Location\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Location is used to calculate accurate prayer times and Qibla direction\n            </p>\n            <Button onClick={handleLocationPermission} data-testid=\"button-location-permission\">\n              Grant Location Permission\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Appearance Settings */}\n        <Card data-testid=\"card-appearance-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Palette className=\"mr-2 h-5 w-5\" />\n              Appearance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"dark-mode\">Dark Mode</Label>\n              <Switch\n                id=\"dark-mode\"\n                checked={darkMode}\n                onCheckedChange={setDarkMode}\n                data-testid=\"switch-dark-mode\"\n              />\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Toggle between light and dark themes\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Download APK Section */}\n        <Card data-testid=\"card-download-apk\" className=\"border-amber-500/50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-amber-500\">\n              <Download className=\"mr-2 h-5 w-5\" />\n              Install Android App\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Get Islamic Companion on your Android device\n            </p>\n            <div className=\"flex flex-col gap-3\">\n              {isInstallable && (\n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={handleInstallClick}\n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                    data-testid=\"button-install-pwa\"\n                  >\n                    <Smartphone className=\"mr-2 h-4 w-4\" />\n                    One-Click Install (Recommended)\n                  </Button>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Instant installation - just click and confirm\n                  </p>\n                </div>\n              )}\n              <div className=\"space-y-2\">\n                <Button \n                  onClick={handleDownloadAPK}\n                  className=\"w-full bg-amber-500 hover:bg-amber-600 text-white\"\n                  data-testid=\"button-download-apk\"\n                  variant={isInstallable ? \"outline\" : \"default\"}\n                >\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  {isInstallable ? \"Alternative: Generate APK\" : \"Generate APK File\"}\n                </Button>\n                <p className=\"text-xs text-muted-foreground\">\n                  Opens APK builder tool - follow steps to download\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* About Section */}\n        <Card data-testid=\"card-about\">\n          <CardHeader>\n            <CardTitle>About</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Islamic Companion v1.0.0\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              A comprehensive Islamic app for prayer times, Qibla direction, and more.\n            </p>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8661},"client/src/pages/surah.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { BookMarked } from \"lucide-react\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { surahs, Surah } from \"@/data/surahs\";\n\nexport default function SurahPage() {\n  const [selectedSurah, setSelectedSurah] = useState<Surah | null>(null);\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-b from-emerald-950 to-emerald-900\">\n      <div className=\"flex-1 overflow-hidden pb-16\">\n        <ScrollArea className=\"h-full\">\n          <div className=\"p-4 space-y-4\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-14 h-14 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n                <BookMarked className=\"w-7 h-7 text-emerald-950\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-black text-amber-400\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>সূরা সমূহ</h1>\n                <p className=\"text-sm text-emerald-100 font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>আরবি • বাংলা উচ্চারণ • বাংলা অর্থ</p>\n              </div>\n            </div>\n\n            {selectedSurah && (\n              <Card className=\"bg-[#0E3B1A] border border-[#1D5E2D] shadow-[0_10px_30px_rgba(0,0,0,0.35)] rounded-3xl overflow-hidden max-w-[420px] mx-auto\" data-testid=\"surah-card\">\n              <div className=\"bg-gradient-to-b from-[#125022] to-[#0E3B1A] p-6 space-y-5\">\n                <div className=\"text-center\">\n                  <p className=\"text-white text-xl font-bold mb-4\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em' }}>\n                    বিসমিল্লাহির রহমানির রহীম\n                  </p>\n                  <div className=\"w-[72px] h-[72px] mx-auto mb-4 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-[0_4px_12px_rgba(0,0,0,0.3)]\">\n                    <span className=\"text-3xl font-black text-emerald-950\" data-testid=\"surah-number\">\n                      {selectedSurah.number}\n                    </span>\n                  </div>\n                  <h2 className=\"text-3xl font-bold text-amber-400 mb-2\" style={{ fontFamily: \"'Noto Naskh Arabic', serif\", textShadow: '0 2px 8px rgba(251,191,36,0.3)' }} data-testid=\"surah-name-arabic\">\n                    {selectedSurah.nameArabic}\n                  </h2>\n                  <h3 className=\"text-[28px] font-black text-emerald-100 mb-2 leading-tight\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '-0.01em' }} data-testid=\"surah-name-bengali\">\n                    {selectedSurah.nameBengali}\n                  </h3>\n                  <p className=\"text-sm text-emerald-200 mb-3 uppercase tracking-wide font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }} data-testid=\"surah-name-english\">\n                    {selectedSurah.nameEnglish}\n                  </p>\n                  <div className=\"flex justify-center gap-4 text-sm text-emerald-200 font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>\n                    <span data-testid=\"surah-type\">{selectedSurah.revelationType}</span>\n                    <span>•</span>\n                    <span data-testid=\"surah-ayahs\">{selectedSurah.numberOfAyahs} আয়াত</span>\n                  </div>\n                </div>\n\n                <div \n                  className=\"text-center p-6 rounded-2xl bg-[#0E3B1A] shadow-[inset_0_2px_8px_rgba(0,0,0,0.3)] whitespace-pre-line\"\n                  style={{ direction: 'rtl', fontFamily: \"'Noto Naskh Arabic', serif\", fontFeatureSettings: \"'liga' 1\" }}\n                  data-testid=\"surah-arabic\"\n                >\n                  <p className=\"text-[30px] leading-[1.6] text-white font-normal antialiased\">\n                    {selectedSurah.fullText}\n                  </p>\n                </div>\n\n                {selectedSurah.transliteration && (\n                  <div className=\"p-7 rounded-2xl bg-[#0E3B1A] shadow-[inset_0_2px_8px_rgba(0,0,0,0.3)]\" data-testid=\"surah-transliteration\">\n                    <p className=\"text-2xl font-bold text-white mb-5 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em' }}>বিসমিল্লাহির রহমানির রহীম</p>\n                    <div className=\"my-5\"></div>\n                    <p className=\"font-black text-lg text-amber-400 mb-5 border-b border-amber-400/30 pb-3 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>বাংলা উচ্চারণ:</p>\n                    <p className=\"text-xl text-white leading-loose font-bold text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em', lineHeight: '2.2' }}>\n                      {selectedSurah.transliteration}\n                    </p>\n                  </div>\n                )}\n\n                {selectedSurah.translation && (\n                  <div className=\"p-7 rounded-2xl bg-[#0F4220]\" data-testid=\"surah-translation\">\n                    <p className=\"font-black text-lg text-amber-400 mb-5 border-b border-amber-400/30 pb-3 text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>বাংলা অর্থ:</p>\n                    <p className=\"text-lg text-[#F5FAD7] leading-loose font-semibold text-center\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\", letterSpacing: '0.02em', lineHeight: '2' }}>\n                      {selectedSurah.translation}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </Card>\n            )}\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              {surahs.map(surah => (\n                <Card\n                  key={surah.id}\n                  className={`p-3 cursor-pointer transition-all ${\n                    selectedSurah?.id === surah.id\n                      ? 'bg-amber-400/20 border-2 border-amber-400'\n                      : 'bg-emerald-900/30 border border-amber-400/10 hover:border-amber-400/30'\n                  }`}\n                  onClick={() => setSelectedSurah(surah)}\n                  data-testid={`surah-item-${surah.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-full bg-amber-500/20 flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-amber-400 font-bold text-sm\">{surah.number}</span>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-bold text-amber-400 truncate\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>\n                        {surah.nameBengali}\n                      </p>\n                      <p className=\"text-xs text-emerald-200 truncate font-semibold\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }}>\n                        {surah.nameEnglish}\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n\n      <BottomNavigation currentPage=\"surah\" />\n    </div>\n  );\n}\n","size_bytes":7552},"client/src/utils/bengali-glossary.ts":{"content":"// Bengali translation glossary for Islamic names\nexport const bengaliGlossary: Record<string, string> = {\n  // Divine attributes (Asma ul Husna)\n  \"Allah\": \"আল্লাহ\",\n  \"Merciful\": \"দয়ালু\",\n  \"Compassionate\": \"করুণাময়\",\n  \"King\": \"রাজা\",\n  \"Holy\": \"পবিত্র\",\n  \"Peaceful\": \"শান্তিময়\",\n  \"Guardian\": \"রক্ষক\",\n  \"Mighty\": \"পরাক্রমশালী\",\n  \"Compeller\": \"বিধায়ক\",\n  \"Supremely Great\": \"মহান\",\n  \"Creator\": \"স্রষ্টা\",\n  \"Evolver\": \"উদ্ভাবক\",\n  \"Fashioner\": \"আকৃতিদাতা\",\n  \"Forgiving\": \"ক্ষমাশীল\",\n  \"Subduer\": \"পরাজয়কারী\",\n  \"Bestower\": \"দাতা\",\n  \"Provider\": \"রিজিকদাতা\",\n  \"Opener\": \"উন্মোচনকারী\",\n  \"All-Knowing\": \"সর্বজ্ঞ\",\n  \"Constrictor\": \"সংকোচনকারী\",\n  \"Expander\": \"সম্প্রসারণকারী\",\n  \"Abaser\": \"অবনতকারী\",\n  \"Exalter\": \"উন্নতকারী\",\n  \"Honourer\": \"সম্মানদাতা\",\n  \"Humiliator\": \"অপমানকারী\",\n  \"All-Hearing\": \"সর্বশ্রোতা\",\n  \"All-Seeing\": \"সর্বদ্রষ্টা\",\n  \"Judge\": \"বিচারক\",\n  \"Just\": \"ন্যায়বিচারক\",\n  \"Subtle\": \"সূক্ষ্মদর্শী\",\n  \"All-Aware\": \"সর্বজ্ঞাতা\",\n  \"Forbearing\": \"সহনশীল\",\n  \"Magnificent\": \"মহিমান্বিত\",\n  \"Oft-Forgiving\": \"ক্ষমাশীল\",\n  \"Appreciative\": \"কৃতজ্ঞ\",\n  \"Most High\": \"সর্বোচ্চ\",\n  \"Most Great\": \"মহান\",\n  \"Preserver\": \"রক্ষণাবেক্ষণকারী\",\n  \"Nourisher\": \"পুষ্টি সরবরাহকারী\",\n  \"Reckoner\": \"হিসাবকারী\",\n  \"Majestic\": \"মহিমান্বিত\",\n  \"Generous\": \"উদার\",\n  \"Watchful\": \"তত্ত্বাবধায়ক\",\n  \"Responsive\": \"প্রতিক্রিয়াশীল\",\n  \"All-Encompassing\": \"সর্বব্যাপী\",\n  \"Wise\": \"প্রজ্ঞাবান\",\n  \"Loving\": \"প্রেমময়\",\n  \"Glorious\": \"মহিমাময়\",\n  \"Resurrector\": \"পুনরুত্থানকারী\",\n  \"Witness\": \"সাক্ষী\",\n  \"Truth\": \"সত্য\",\n  \"Trustee\": \"কর্মবিধায়ক\",\n  \"Strong\": \"শক্তিশালী\",\n  \"Firm\": \"দৃঢ়\",\n  \"Protecting Friend\": \"বন্ধু\",\n  \"Praiseworthy\": \"প্রশংসিত\",\n  \"Counter\": \"গণনাকারী\",\n  \"Originator\": \"উৎপাদনকারী\",\n  \"Restorer\": \"পুনরুদ্ধারকারী\",\n  \"Giver of Life\": \"জীবনদাতা\",\n  \"Dealer of Death\": \"মৃত্যুদাতা\",\n  \"Ever Living\": \"চিরজীবী\",\n  \"Self-Subsisting\": \"স্বয়ংসম্পূর্ণ\",\n  \"Perceiver\": \"উপলব্ধিকারী\",\n  \"Glorious One\": \"মহিমান্বিত\",\n  \"Only One\": \"একক\",\n  \"Unique\": \"অদ্বিতীয়\",\n  \"Eternal\": \"চিরন্তন\",\n  \"Able\": \"সক্ষম\",\n  \"Powerful\": \"শক্তিমান\",\n  \"Expediter\": \"ত্বরিতকারী\",\n  \"Delayer\": \"বিলম্বকারী\",\n  \"First\": \"প্রথম\",\n  \"Last\": \"শেষ\",\n  \"Manifest\": \"প্রকাশ্য\",\n  \"Hidden\": \"গোপন\",\n  \"Governor\": \"শাসক\",\n  \"Most Exalted\": \"সর্বোচ্চ\",\n  \"Source of Good\": \"কল্যাণের উৎস\",\n  \"Turner of Hearts\": \"হৃদয় পরিবর্তনকারী\",\n  \"Avenger\": \"প্রতিশোধ গ্রহণকারী\",\n  \"Pardoner\": \"ক্ষমাকারী\",\n  \"Kind\": \"দয়ালু\",\n  \"Owner of Sovereignty\": \"সার্বভৌমত্বের মালিক\",\n  \"Lord of Majesty and Honour\": \"মহিমা ও সম্মানের অধিকারী\",\n  \"Equitable\": \"ন্যায়পরায়ণ\",\n  \"Gatherer\": \"একত্রিতকারী\",\n  \"Rich\": \"স্বয়ংসম্পূর্ণ\",\n  \"Enricher\": \"সমৃদ্ধকারী\",\n  \"Preventer\": \"প্রতিরোধকারী\",\n  \"Distresser\": \"কষ্টদানকারী\",\n  \"Benefactor\": \"উপকারী\",\n  \"Light\": \"আলো\",\n  \"Guide\": \"পথপ্রদর্শক\",\n  \"Incomparable\": \"অতুলনীয়\",\n  \"Everlasting\": \"চিরস্থায়ী\",\n  \"Inheritor\": \"উত্তরাধিকারী\",\n  \"Guide to Right Path\": \"সঠিক পথের দিশারী\",\n  \"Patient\": \"ধৈর্যশীল\",\n\n  // Common terms\n  \"Servant\": \"বান্দা\",\n  \"Slave\": \"দাস\",\n  \"Worshipper\": \"উপাসক\",\n  \"Beloved\": \"প্রিয়\",\n  \"Friend\": \"বন্ধু\",\n  \"Helper\": \"সাহায্যকারী\",\n  \"Supporter\": \"সমর্থক\",\n  \"Noble\": \"মর্যাদাবান\",\n  \"Honored\": \"সম্মানিত\",\n  \"Blessed\": \"আশীর্বাদপ্রাপ্ত\",\n  \"Pure\": \"পবিত্র\",\n  \"Clean\": \"পরিষ্কার\",\n  \"Righteous\": \"ধার্মিক\",\n  \"Pious\": \"মুত্তাকী\",\n  \"Devout\": \"নিষ্ঠাবান\",\n  \"Faithful\": \"বিশ্বস্ত\",\n  \"Trustworthy\": \"আস্থাভাজন\",\n  \"Truthful\": \"সত্যবাদী\",\n  \"Sincere\": \"আন্তরিক\",\n  \"Obedient\": \"অনুগত\",\n  \"Submissive\": \"বিনীত\",\n  \"Humble\": \"নম্র\",\n  \"Gentle\": \"কোমল\",\n  \"Soft\": \"নরম\",\n  \"Beautiful\": \"সুন্দর\",\n  \"Handsome\": \"সুদর্শন\",\n  \"Pleasant\": \"মনোরম\",\n  \"Delightful\": \"আনন্দদায়ক\",\n  \"Joyful\": \"আনন্দিত\",\n  \"Happy\": \"খুশি\",\n  \"Content\": \"সন্তুষ্ট\",\n  \"Calm\": \"শান্ত\",\n  \"Tranquil\": \"স্থির\",\n  \"Serene\": \"নির্মল\",\n  \"Bright\": \"উজ্জ্বল\",\n  \"Shining\": \"চকচকে\",\n  \"Radiant\": \"দীপ্তিমান\",\n  \"Brilliant\": \"তেজস্বী\",\n  \"Intelligent\": \"বুদ্ধিমান\",\n  \"Learned\": \"পণ্ডিত\",\n  \"Scholar\": \"আলেম\",\n  \"Teacher\": \"শিক্ষক\",\n  \"Student\": \"ছাত্র\",\n  \"Seeker\": \"অন্বেষণকারী\",\n  \"Finder\": \"আবিষ্কারক\",\n  \"Leader\": \"নেতা\",\n  \"Commander\": \"সেনাপতি\",\n  \"Ruler\": \"শাসক\",\n  \"Prince\": \"রাজপুত্র\",\n  \"Princess\": \"রাজকন্যা\",\n  \"Queen\": \"রানী\",\n  \"Flower\": \"ফুল\",\n  \"Rose\": \"গোলাপ\",\n  \"Jasmine\": \"জুঁই\",\n  \"Lily\": \"শাপলা\",\n  \"Star\": \"তারা\",\n  \"Moon\": \"চাঁদ\",\n  \"Sun\": \"সূর্য\",\n  \"Dawn\": \"ভোর\",\n  \"Morning\": \"সকাল\",\n  \"Evening\": \"সন্ধ্যা\",\n  \"Night\": \"রাত\",\n  \"Day\": \"দিন\",\n  \"Lion\": \"সিংহ\",\n  \"Eagle\": \"ঈগল\",\n  \"Falcon\": \"বাজপাখি\",\n  \"Pearl\": \"মুক্তা\",\n  \"Jewel\": \"রত্ন\",\n  \"Diamond\": \"হীরা\",\n  \"Gold\": \"সোনা\",\n  \"Silver\": \"রুপা\",\n  \"River\": \"নদী\",\n  \"Ocean\": \"সমুদ্র\",\n  \"Mountain\": \"পর্বত\",\n  \"Garden\": \"বাগান\",\n  \"Paradise\": \"জান্নাত\",\n  \"Heaven\": \"স্বর্গ\",\n  \"Blessing\": \"আশীর্বাদ\",\n  \"Gift\": \"উপহার\",\n  \"Favor\": \"অনুগ্রহ\",\n  \"Grace\": \"করুণা\",\n  \"Mercy\": \"রহমত\",\n  \"Compassion\": \"দয়া\",\n  \"Love\": \"ভালোবাসা\",\n  \"Affection\": \"স্নেহ\",\n  \"Kindness\": \"সদয়তা\",\n  \"Goodness\": \"ভালো\",\n  \"Excellence\": \"উৎকর্ষ\",\n  \"Perfection\": \"পূর্ণতা\",\n  \"Success\": \"সাফল্য\",\n  \"Victory\": \"বিজয়\",\n  \"Triumph\": \"জয়\",\n  \"Honor\": \"সম্মান\",\n  \"Glory\": \"গৌরব\",\n  \"Fame\": \"খ্যাতি\",\n  \"Reputation\": \"সুনাম\",\n  \"Dignity\": \"মর্যাদা\",\n  \"Respect\": \"শ্রদ্ধা\",\n  \"Reverence\": \"সম্মান\",\n  \"Veneration\": \"পূজা\",\n\n  // Prophetic names\n  \"Moses\": \"মুসা\",\n  \"Jesus\": \"ঈসা\", \n  \"Abraham\": \"ইব্রাহীম\",\n  \"Isaac\": \"ইসহাক\",\n  \"Jacob\": \"ইয়াকুব\",\n  \"Joseph\": \"ইউসুফ\",\n  \"David\": \"দাউদ\",\n  \"Solomon\": \"সুলাইমান\",\n  \"Job\": \"আইয়ুব\",\n  \"Jonah\": \"ইউনুস\",\n  \"Elijah\": \"ইলিয়াস\",\n  \"Elisha\": \"আল-ইয়াসা\",\n  \"Aaron\": \"হারূন\",\n  \"Noah\": \"নূহ\",\n  \"Adam\": \"আদম\",\n  \"Idris\": \"ইদ্রিস\",\n  \"Lot\": \"লূত\",\n  \"Ishmael\": \"ইসমাইল\",\n  \"Zachariah\": \"জাকারিয়া\",\n  \"John\": \"ইয়াহইয়া\",\n  \"Muhammad\": \"মুহাম্মদ\",\n\n  // Common phrases\n  \"of the\": \"এর\",\n  \"of\": \"এর\",\n  \"the\": \"\",\n  \"and\": \"এবং\",\n  \"or\": \"অথবা\",\n  \"with\": \"সাথে\",\n  \"from\": \"থেকে\",\n  \"to\": \"প্রতি\",\n  \"for\": \"জন্য\",\n  \"in\": \"মধ্যে\",\n  \"on\": \"উপর\",\n  \"at\": \"এ\",\n  \"by\": \"দ্বারা\",\n  \"is\": \"হয়\",\n  \"are\": \"হয়\",\n  \"has\": \"আছে\",\n  \"have\": \"আছে\",\n  \"will\": \"হবে\",\n  \"shall\": \"হবে\",\n  \"would\": \"হবে\",\n  \"could\": \"পারে\",\n  \"should\": \"উচিত\",\n  \"may\": \"পারে\",\n  \"might\": \"পারে\",\n  \"can\": \"পারে\",\n  \"must\": \"অবশ্যই\",\n  \"one who\": \"যে\",\n  \"he who\": \"যে\",\n  \"she who\": \"যে\",\n  \"that which\": \"যা\",\n  \"which\": \"যা\",\n  \"who\": \"যে\",\n  \"what\": \"কি\",\n  \"when\": \"কখন\",\n  \"where\": \"কোথায়\",\n  \"why\": \"কেন\",\n  \"how\": \"কীভাবে\"\n};\n\n// Special patterns for \"Servant of\" constructions\nexport const servantPatterns: Record<string, string> = {\n  \"Servant of Allah\": \"আল্লাহর বান্দা\",\n  \"Servant of the Merciful\": \"পরম দয়ালুর বান্দা\",\n  \"Servant of the Compassionate\": \"পরম করুণাময়ের বান্দা\",\n  \"Servant of the King\": \"রাজার বান্দা\",\n  \"Servant of the Holy\": \"পবিত্রতার বান্দা\",\n  \"Servant of the Peaceful\": \"শান্তিময়ের বান্দা\",\n  \"Servant of the Guardian\": \"রক্ষকের বান্দা\",\n  \"Servant of the Mighty\": \"পরাক্রমশালীর বান্দা\",\n  \"Servant of the Wise\": \"প্রজ্ঞাবানের বান্দা\",\n  \"Servant of the Generous\": \"দয়ালুর বান্দা\",\n  \"Servant of the Just\": \"ন্যায়বিচারকের বান্দা\",\n  \"Servant of the Forgiving\": \"ক্ষমাশীলের বান্দা\",\n  \"Servant of the Provider\": \"রিজিকদাতার বান্দা\",\n  \"Servant of the Creator\": \"স্রষ্টার বান্দা\",\n  \"Servant of the All-Knowing\": \"সর্বজ্ঞের বান্দা\",\n  \"Servant of the All-Seeing\": \"সর্বদ্রষ্টার বান্দা\",\n  \"Servant of the All-Hearing\": \"সর্বশ্রোতার বান্দা\",\n  \"Servant of the Most High\": \"সর্বোচ্চের বান্দা\",\n  \"Servant of the Most Great\": \"মহানের বান্দা\",\n  \"Servant of the Strong\": \"শক্তিশালীর বান্দা\",\n  \"Servant of the Light\": \"আলোর বান্দা\",\n  \"Servant of the Truth\": \"সত্যের বান্দা\",\n  \"Servant of the Unique\": \"অদ্বিতীয়ের বান্দা\",\n  \"Servant of the Eternal\": \"চিরন্তনের বান্দা\",\n  \"Servant of the Living\": \"চিরজীবীর বান্দা\",\n  \"Servant of the Self-Subsisting\": \"স্বয়ংসম্পূর্ণের বান্দা\",\n  \"Servant of the Praiseworthy\": \"প্রশংসিতের বান্দা\",\n  \"Servant of the Glorious\": \"মহিমাময়ের বান্দা\",\n  \"Servant of the Patient\": \"ধৈর্যশীলের বান্দা\"\n};","size_bytes":12224},"client/src/utils/bengali-translator.ts":{"content":"import { bengaliGlossary, servantPatterns } from './bengali-glossary';\n\n/**\n * Translates English Islamic name meanings to Bengali\n */\nexport function translateToBengali(\n  meaning: string, \n  name?: string, \n  origin?: string, \n  category?: string\n): string {\n  // Remove extra whitespace and normalize\n  const normalizedMeaning = meaning.trim().replace(/\\s+/g, ' ');\n  \n  // Check for direct servant patterns first\n  if (servantPatterns[normalizedMeaning]) {\n    return servantPatterns[normalizedMeaning];\n  }\n  \n  // Check for \"Servant of the X\" pattern\n  const servantMatch = normalizedMeaning.match(/^Servant of the (.+)$/i);\n  if (servantMatch) {\n    const attribute = servantMatch[1];\n    const bengaliAttribute = bengaliGlossary[attribute];\n    if (bengaliAttribute) {\n      return `${bengaliAttribute}এর বান্দা`;\n    }\n  }\n  \n  // Check for \"Servant of X\" pattern (without \"the\")\n  const servantMatchSimple = normalizedMeaning.match(/^Servant of (.+)$/i);\n  if (servantMatchSimple) {\n    const attribute = servantMatchSimple[1];\n    const bengaliAttribute = bengaliGlossary[attribute];\n    if (bengaliAttribute) {\n      return `${bengaliAttribute}র বান্দা`;\n    }\n  }\n  \n  // Check for direct translations in glossary\n  if (bengaliGlossary[normalizedMeaning]) {\n    return bengaliGlossary[normalizedMeaning];\n  }\n  \n  // Try word-by-word translation for compound meanings\n  const words = normalizedMeaning.split(' ');\n  const translatedWords: string[] = [];\n  \n  for (const word of words) {\n    // Remove punctuation for lookup\n    const cleanWord = word.replace(/[.,;:!?]/g, '');\n    const bengaliWord = bengaliGlossary[cleanWord] || bengaliGlossary[cleanWord.toLowerCase()];\n    \n    if (bengaliWord) {\n      translatedWords.push(bengaliWord);\n    } else {\n      // Keep the original word if no translation found\n      translatedWords.push(word);\n    }\n  }\n  \n  // Join translated words\n  let result = translatedWords.join(' ');\n  \n  // Clean up common patterns\n  result = result.replace(/\\s+/g, ' ').trim();\n  \n  // If no translation was possible, return the original meaning\n  if (result === normalizedMeaning || result.includes('undefined')) {\n    return normalizedMeaning;\n  }\n  \n  return result;\n}\n\n/**\n * Enhanced translation with context-aware patterns\n */\nexport function translateWithContext(\n  meaning: string,\n  name: string,\n  origin?: string,\n  category?: string\n): string {\n  // Special handling for names with known patterns\n  if (name.startsWith('Abd') || name.startsWith('Abdul')) {\n    // This is likely a \"Servant of\" name\n    if (!meaning.toLowerCase().includes('servant')) {\n      // If meaning doesn't mention servant, try to infer it\n      const bengaliAttribute = bengaliGlossary[meaning];\n      if (bengaliAttribute) {\n        return `${bengaliAttribute}এর বান্দা`;\n      }\n    }\n  }\n  \n  // Use the main translation function\n  return translateToBengali(meaning, name, origin, category);\n}\n\n/**\n * Batch translation utility for converting all names\n */\nexport function batchTranslate(\n  names: Array<{ meaning: string; name: string; origin?: string; category?: string }>\n): Array<{ meaning: string; meaningBengali: string }> {\n  const results: Array<{ meaning: string; meaningBengali: string }> = [];\n  const unknownMeanings = new Set<string>();\n  \n  for (const nameData of names) {\n    const bengaliMeaning = translateWithContext(\n      nameData.meaning,\n      nameData.name,\n      nameData.origin,\n      nameData.category\n    );\n    \n    results.push({\n      meaning: nameData.meaning,\n      meaningBengali: bengaliMeaning\n    });\n    \n    // Track meanings that couldn't be translated\n    if (bengaliMeaning === nameData.meaning) {\n      unknownMeanings.add(nameData.meaning);\n    }\n  }\n  \n  // Log unknown meanings for improvement\n  if (unknownMeanings.size > 0) {\n    console.log('Unknown meanings for Bengali translation:', Array.from(unknownMeanings));\n  }\n  \n  return results;\n}","size_bytes":3968},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/top-bar.tsx":{"content":"import { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { useLocation } from \"wouter\";\nimport { Settings } from \"lucide-react\";\n\ninterface TopBarProps {\n  title?: string;\n  subtitle?: string;\n}\n\nexport default function TopBar({ title = \"Islamic Companion\", subtitle }: TopBarProps) {\n  const [, setLocation] = useLocation();\n\n  return (\n    <header className=\"bg-gradient-to-r from-emerald-800 via-emerald-700 to-emerald-800 text-white p-5 shadow-2xl relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-amber-400/10 to-transparent\"></div>\n      <div className=\"relative flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-emerald-600/50 -ml-2\"\n                data-testid=\"button-menu\"\n              >\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"bg-gradient-to-b from-emerald-950 to-emerald-900 text-white border-emerald-700\">\n              <SheetHeader>\n                <SheetTitle className=\"text-amber-400 text-xl\">Menu</SheetTitle>\n              </SheetHeader>\n              <div className=\"mt-6 flex flex-col gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"justify-start text-white hover:bg-emerald-800 hover:text-amber-400 gap-3\"\n                  onClick={() => setLocation(\"/settings\")}\n                  data-testid=\"link-settings\"\n                >\n                  <Settings className=\"h-5 w-5\" />\n                  <span className=\"text-base\">Settings</span>\n                </Button>\n              </div>\n            </SheetContent>\n          </Sheet>\n          <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n            <span className=\"text-2xl\">☪</span>\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-black tracking-tight\" style={{ fontFamily: \"'Nikosh', 'Kalpurush', sans-serif\" }} data-testid=\"app-title\">{title}</h1>\n            {subtitle && (\n              <p className=\"text-sm text-emerald-100 font-semibold flex items-center gap-1\" data-testid=\"location-text\">\n                <span className=\"w-1.5 h-1.5 bg-amber-400 rounded-full animate-pulse\"></span>\n                {subtitle}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2768},"autoGenerateContent.js":{"content":"/**\n * Auto Content Generation System\n * \n * এই ফাইলটি আপনার Islamic Companion অ্যাপের জন্য automatic content generation \n * সিস্টেমের documentation এবং future extension এর জন্য template হিসেবে কাজ করবে।\n * \n * বর্তমানে implemented features:\n * --------------------------------\n * \n * ১. Verse of the Day (আয়াত অব দ্য ডে):\n *    - Location: server/storage.ts -> getRandomQuranVerse()\n *    - Method: তারিখের উপর ভিত্তি করে deterministic verse selection\n *    - Update Time: প্রতিদিন মধ্যরাত ১২টায় automatic\n *    - Cache: Frontend cache মধ্যরাত পর্যন্ত valid থাকে\n * \n * কিভাবে কাজ করে:\n * ---------------\n * \n * 1. Backend (server/storage.ts):\n *    - বছরের দিন নম্বর (day of year) calculate করে\n *    - Total verses এর মধ্যে modulo operation করে একটি নির্দিষ্ট verse select করে\n *    - একই তারিখে সবসময় একই verse পাওয়া যায়\n * \n * 2. Frontend (client/src/components/quran-verse.tsx):\n *    - মধ্যরাত পর্যন্ত cache করে রাখে\n *    - মধ্যরাতের পর নতুন verse fetch করে\n * \n * Future Extensions (ভবিষ্যতে যোগ করা যেতে পারে):\n * ------------------------------------------------\n * \n * ১. Daily Dua (দৈনিক দোয়া):\n *    - একই পদ্ধতিতে প্রতিদিন একটি নির্দিষ্ট dua দেখানো\n *    - File: server/routes.ts এ নতুন endpoint যোগ করুন\n * \n * ২. Islamic Name of the Day:\n *    - প্রতিদিন একটি ইসলামিক নাম highlight করা\n * \n * ৩. Hadith of the Day:\n *    - প্রতিদিন একটি হাদিস শেয়ার করা\n * \n * Example: নতুন content type যোগ করার জন্য\n * ----------------------------------------\n * \n * // server/storage.ts এ নতুন method:\n * async getDailyDua(): Promise<Dua | undefined> {\n *   const duas = Array.from(this.duas.values());\n *   if (duas.length === 0) return undefined;\n *   \n *   const today = new Date();\n *   const dayOfYear = Math.floor(\n *     (today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) \n *     / 1000 / 60 / 60 / 24\n *   );\n *   const duaIndex = dayOfYear % duas.length;\n *   \n *   return duas[duaIndex];\n * }\n * \n * // server/routes.ts এ নতুন route:\n * app.get(\"/api/daily-dua\", async (req, res) => {\n *   try {\n *     const dua = await storage.getDailyDua();\n *     if (!dua) {\n *       return res.status(404).json({ message: \"No duas found\" });\n *     }\n *     res.json(dua);\n *   } catch (error) {\n *     res.status(500).json({ message: \"Failed to get daily dua\" });\n *   }\n * });\n * \n * Timezone Support (ভবিষ্যতে):\n * ---------------------------\n * \n * বর্তমানে server timezone অনুযায়ী কাজ করে। User এর local timezone \n * support করতে চাইলে:\n * \n * 1. Frontend থেকে user এর timezone পাঠাতে হবে\n * 2. Backend এ সেই timezone অনুযায়ী date calculate করতে হবে\n * \n * Notes:\n * ------\n * - এই system cron job এর চেয়ে better কারণ server restart হলেও কাজ করবে\n * - Memory efficient - কোনো extra storage লাগে না\n * - সব ইউজারের জন্য consistent experience\n */\n\nconsole.log(\"✅ Auto Content Generation System Active\");\nconsole.log(\"📅 Verse of the Day updates automatically at midnight\");\nconsole.log(\"🔄 No manual intervention required\");\n","size_bytes":4040},"server/openai-quiz.ts":{"content":"import OpenAI from \"openai\";\nimport type { DailyQuiz } from \"@shared/schema\";\nimport { quizQuestions } from \"../client/src/data/quiz-questions\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) : null;\n\ninterface QuizResponse {\n  question: string;\n  questionBengali: string;\n  options: string[];\n  optionsBengali: string[];\n  correctAnswer: number;\n  explanation: string;\n  explanationBengali: string;\n  category: string;\n}\n\nexport async function generateDailyQuiz(): Promise<Omit<DailyQuiz, 'id'>> {\n  // Try OpenAI first if API key is available and valid\n  if (openai) {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an Islamic knowledge expert. Generate one multiple-choice quiz question about Islam. \n            \n            Categories to choose from: Quran, Hadith, Prophets, Pillars of Islam, Islamic History, Fiqh (Islamic Law), Seerah (Prophet's Life)\n            \n            Provide the response in JSON format with:\n            - question (in English)\n            - questionBengali (in Bengali script)\n            - options (array of 4 options in English)\n            - optionsBengali (array of 4 options in Bengali script)\n            - correctAnswer (index 0-3 of correct option)\n            - explanation (detailed explanation in English)\n            - explanationBengali (detailed explanation in Bengali script)\n            - category (one of the categories listed above)\n            \n            Make sure the Bengali translations are accurate and use proper Bengali script.`\n          },\n          {\n            role: \"user\",\n            content: \"Generate an Islamic quiz question with Bengali translation.\"\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_completion_tokens: 2048,\n      });\n\n      const quizData: QuizResponse = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        question: quizData.question,\n        questionBengali: quizData.questionBengali,\n        options: quizData.options,\n        optionsBengali: quizData.optionsBengali,\n        correctAnswer: quizData.correctAnswer,\n        explanation: quizData.explanation,\n        explanationBengali: quizData.explanationBengali,\n        category: quizData.category,\n      };\n    } catch (error) {\n      console.error(\"Error generating quiz with OpenAI, using fallback:\", error);\n      // Fall through to use fallback questions\n    }\n  }\n  \n  // Fallback: Use pre-defined questions\n  const today = new Date();\n  const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 1000 / 60 / 60 / 24);\n  const quizIndex = dayOfYear % quizQuestions.length;\n  \n  return quizQuestions[quizIndex];\n}\n","size_bytes":2997},"client/src/components/daily-quiz.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Brain, RefreshCw, Check, X } from \"lucide-react\";\nimport type { DailyQuiz as DailyQuizType } from \"@shared/schema\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function DailyQuiz() {\n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);\n  const [showResult, setShowResult] = useState(false);\n  \n  const getMillisecondsUntilMidnight = () => {\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    return tomorrow.getTime() - now.getTime();\n  };\n  \n  const { data: quiz, isLoading, error } = useQuery<DailyQuizType>({\n    queryKey: [\"/api/daily-quiz\"],\n    staleTime: getMillisecondsUntilMidnight(),\n  });\n  \n  if (error) {\n    console.error(\"Daily quiz error:\", error);\n  }\n\n  const refreshMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/daily-quiz/refresh\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-quiz\"] });\n      setSelectedAnswer(null);\n      setShowResult(false);\n    }\n  });\n\n  const handleAnswer = (index: number) => {\n    if (showResult) return;\n    setSelectedAnswer(index);\n    setShowResult(true);\n  };\n\n  const handleRefresh = () => {\n    refreshMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-emerald-800/30 rounded w-1/3\"></div>\n          <div className=\"h-48 bg-emerald-800/30 rounded-2xl\"></div>\n        </div>\n      </section>\n    );\n  }\n\n  if (!quiz) {\n    return (\n      <section className=\"p-4\">\n        <div className=\"text-center text-emerald-300\">\n          Unable to load quiz\n        </div>\n      </section>\n    );\n  }\n\n  const isCorrect = selectedAnswer === quiz.correctAnswer;\n\n  return (\n    <section className=\"p-4\" data-testid=\"section-daily-quiz\">\n      <h2 className=\"text-xl font-black mb-4 flex items-center justify-between text-amber-400\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg mr-3\">\n            <Brain className=\"text-emerald-950 w-5 h-5\" />\n          </div>\n          Daily Quiz\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleRefresh}\n          disabled={refreshMutation.isPending}\n          className=\"text-amber-400 hover:text-amber-300 hover:bg-emerald-800/30\"\n          data-testid=\"button-refresh-quiz\"\n        >\n          <RefreshCw className={`h-4 w-4 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n        </Button>\n      </h2>\n      \n      <div className=\"bg-gradient-to-br from-[#0E3B1A] to-[#0A2E14] rounded-2xl p-6 border border-amber-400/20 shadow-[0_8px_24px_rgba(0,0,0,0.3)]\">\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-amber-400 font-semibold mb-2\">{quiz.category}</p>\n          <p className=\"text-lg text-white font-semibold mb-2\" data-testid=\"text-question\">\n            {quiz.questionBengali}\n          </p>\n          <p className=\"text-sm text-emerald-200 italic\">{quiz.question}</p>\n        </div>\n\n        <div className=\"space-y-2 mb-4\">\n          {quiz.optionsBengali.map((option, index) => (\n            <button\n              key={index}\n              onClick={() => handleAnswer(index)}\n              disabled={showResult}\n              className={`w-full text-left p-3 rounded-lg transition-all duration-200 ${\n                showResult\n                  ? index === quiz.correctAnswer\n                    ? 'bg-green-600/30 border-2 border-green-500'\n                    : selectedAnswer === index\n                    ? 'bg-red-600/30 border-2 border-red-500'\n                    : 'bg-emerald-900/30 border border-emerald-700/30'\n                  : 'bg-emerald-900/30 border border-emerald-700/30 hover:bg-emerald-800/50 hover:border-amber-400/50'\n              }`}\n              data-testid={`button-option-${index}`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-white font-medium\">{option}</p>\n                  <p className=\"text-xs text-emerald-300 mt-1\">{quiz.options[index]}</p>\n                </div>\n                {showResult && (\n                  <div>\n                    {index === quiz.correctAnswer && (\n                      <Check className=\"h-5 w-5 text-green-400\" />\n                    )}\n                    {selectedAnswer === index && index !== quiz.correctAnswer && (\n                      <X className=\"h-5 w-5 text-red-400\" />\n                    )}\n                  </div>\n                )}\n              </div>\n            </button>\n          ))}\n        </div>\n\n        {showResult && (\n          <div className={`p-4 rounded-lg ${isCorrect ? 'bg-green-600/20 border border-green-500/30' : 'bg-red-600/20 border border-red-500/30'}`}>\n            <p className={`font-bold mb-2 ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>\n              {isCorrect ? '✓ সঠিক উত্তর!' : '✗ ভুল উত্তর'}\n            </p>\n            <p className=\"text-white font-medium mb-1\">{quiz.explanationBengali}</p>\n            <p className=\"text-sm text-emerald-200 italic\">{quiz.explanation}</p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5664},"client/src/data/quiz-questions.ts":{"content":"export interface QuizQuestion {\n  question: string;\n  questionBengali: string;\n  options: string[];\n  optionsBengali: string[];\n  correctAnswer: number;\n  explanation: string;\n  explanationBengali: string;\n  category: string;\n}\n\nexport const quizQuestions: QuizQuestion[] = [\n  {\n    question: \"How many pillars of Islam are there?\",\n    questionBengali: \"ইসলামের কয়টি স্তম্ভ আছে?\",\n    options: [\"Three\", \"Four\", \"Five\", \"Six\"],\n    optionsBengali: [\"তিনটি\", \"চারটি\", \"পাঁচটি\", \"ছয়টি\"],\n    correctAnswer: 2,\n    explanation: \"The Five Pillars of Islam are: Shahada (faith), Salah (prayer), Zakat (charity), Sawm (fasting), and Hajj (pilgrimage).\",\n    explanationBengali: \"ইসলামের পাঁচটি স্তম্ভ হলো: শাহাদাহ (বিশ্বাস), সালাহ (নামাজ), যাকাত (দান), সাওম (রোজা), এবং হজ্জ (তীর্থযাত্রা)।\",\n    category: \"Pillars of Islam\"\n  },\n  {\n    question: \"In which city was Prophet Muhammad (PBUH) born?\",\n    questionBengali: \"নবী মুহাম্মদ (সা.) কোন শহরে জন্মগ্রহণ করেছিলেন?\",\n    options: [\"Medina\", \"Makkah\", \"Jerusalem\", \"Damascus\"],\n    optionsBengali: [\"মদিনা\", \"মক্কা\", \"জেরুজালেম\", \"দামেস্ক\"],\n    correctAnswer: 1,\n    explanation: \"Prophet Muhammad (PBUH) was born in Makkah (Mecca) in the year 570 CE.\",\n    explanationBengali: \"নবী মুহাম্মদ (সা.) ৫৭০ খ্রিস্টাব্দে মক্কায় জন্মগ্রহণ করেছিলেন।\",\n    category: \"Seerah\"\n  },\n  {\n    question: \"How many Surahs are in the Quran?\",\n    questionBengali: \"কুরআনে কতটি সূরা আছে?\",\n    options: [\"104\", \"110\", \"114\", \"120\"],\n    optionsBengali: [\"১০৪টি\", \"১১০টি\", \"১১৪টি\", \"১২০টি\"],\n    correctAnswer: 2,\n    explanation: \"The Quran contains 114 Surahs (chapters), starting with Al-Fatihah and ending with An-Nas.\",\n    explanationBengali: \"কুরআনে ১১৪টি সূরা (অধ্যায়) আছে, যা আল-ফাতিহা দিয়ে শুরু এবং আন-নাস দিয়ে শেষ হয়।\",\n    category: \"Quran\"\n  },\n  {\n    question: \"What is the first month of the Islamic calendar?\",\n    questionBengali: \"ইসলামিক ক্যালেন্ডারের প্রথম মাস কোনটি?\",\n    options: [\"Ramadan\", \"Muharram\", \"Rajab\", \"Shawwal\"],\n    optionsBengali: [\"রমজান\", \"মুহাররম\", \"রজব\", \"শাওয়াল\"],\n    correctAnswer: 1,\n    explanation: \"Muharram is the first month of the Islamic (Hijri) calendar and is one of the four sacred months.\",\n    explanationBengali: \"মুহাররম ইসলামিক (হিজরি) ক্যালেন্ডারের প্রথম মাস এবং চারটি পবিত্র মাসের একটি।\",\n    category: \"Islamic History\"\n  },\n  {\n    question: \"How many times do Muslims pray in a day?\",\n    questionBengali: \"মুসলমানরা দিনে কতবার নামাজ পড়ে?\",\n    options: [\"Three\", \"Four\", \"Five\", \"Six\"],\n    optionsBengali: [\"তিনবার\", \"চারবার\", \"পাঁচবার\", \"ছয়বার\"],\n    correctAnswer: 2,\n    explanation: \"Muslims pray five times a day: Fajr, Dhuhr, Asr, Maghrib, and Isha.\",\n    explanationBengali: \"মুসলমানরা দিনে পাঁচবার নামাজ পড়ে: ফজর, জোহর, আসর, মাগরিব এবং এশা।\",\n    category: \"Pillars of Islam\"\n  },\n  {\n    question: \"What does 'Zakat' mean?\",\n    questionBengali: \"'যাকাত' এর অর্থ কী?\",\n    options: [\"Prayer\", \"Fasting\", \"Charity/Almsgiving\", \"Pilgrimage\"],\n    optionsBengali: [\"নামাজ\", \"রোজা\", \"দান/ভিক্ষা\", \"তীর্থযাত্রা\"],\n    correctAnswer: 2,\n    explanation: \"Zakat means purification and growth. It is the obligatory charity given to the poor and needy, calculated as 2.5% of one's wealth.\",\n    explanationBengali: \"যাকাত মানে পবিত্রতা এবং বৃদ্ধি। এটি দরিদ্র এবং অভাবগ্রস্তদের দেওয়া বাধ্যতামূলক দান, যা সম্পদের ২.৫% হিসাবে গণনা করা হয়।\",\n    category: \"Pillars of Islam\"\n  },\n  {\n    question: \"Which angel is responsible for delivering messages from Allah to the Prophets?\",\n    questionBengali: \"কোন ফেরেশতা আল্লাহর বার্তা নবীদের কাছে পৌঁছে দেওয়ার দায়িত্বপ্রাপ্ত?\",\n    options: [\"Mikail\", \"Israfil\", \"Jibreel (Gabriel)\", \"Azrael\"],\n    optionsBengali: [\"মিকাঈল\", \"ইসরাফিল\", \"জিবরীল (জিব্রাঈল)\", \"আজরাঈল\"],\n    correctAnswer: 2,\n    explanation: \"Angel Jibreel (Gabriel) is responsible for delivering Allah's revelations to the Prophets.\",\n    explanationBengali: \"ফেরেশতা জিবরীল (জিব্রাঈল) আল্লাহর ওহী নবীদের কাছে পৌঁছে দেওয়ার দায়িত্বপ্রাপ্ত।\",\n    category: \"Islamic Beliefs\"\n  }\n];\n","size_bytes":5738},"server/openai-verse.ts":{"content":"import OpenAI from \"openai\";\nimport type { QuranVerse } from \"@shared/schema\";\n\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n}) : null;\n\ninterface EnhancedVerse {\n  translationBengali: string;\n  surahNameBengali: string;\n  aiInsight: string;\n  aiInsightBengali: string;\n}\n\nexport async function enhanceVerseWithAI(verse: QuranVerse): Promise<QuranVerse> {\n  if (!openai) {\n    // Return verse without Bengali translation if OpenAI is not configured\n    // This ensures we don't show English text as \"Bengali\"\n    return {\n      ...verse,\n      translationBengali: null,\n      surahNameBengali: null,\n      aiInsight: \"This verse offers guidance and wisdom for believers.\",\n      aiInsightBengali: \"এই আয়াতটি বিশ্বাসীদের জন্য নির্দেশনা এবং প্রজ্ঞা প্রদান করে।\",\n    };\n  }\n\n  try {\n    const prompt = `You are an Islamic scholar and Bengali translator. For the following Quran verse, provide:\n\n1. Bengali translation (accurate and respectful)\n2. Bengali surah name\n3. A brief, meaningful insight in English (2-3 sentences) about the verse's message and relevance to daily life\n4. The same insight translated to Bengali\n\nVerse Details:\n- Surah: ${verse.surahName} (${verse.surahNumber}:${verse.verseNumber})\n- Arabic: ${verse.arabic}\n- English Translation: ${verse.translation}\n\nPlease respond in JSON format with these exact keys:\n{\n  \"translationBengali\": \"...\",\n  \"surahNameBengali\": \"...\",\n  \"aiInsight\": \"...\",\n  \"aiInsightBengali\": \"...\"\n}`;\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert Islamic scholar and Bengali translator. Provide accurate, respectful translations and meaningful insights about Quran verses.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n    });\n\n    const content = completion.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No response from OpenAI\");\n    }\n\n    const enhanced = JSON.parse(content) as EnhancedVerse;\n\n    return {\n      ...verse,\n      translationBengali: enhanced.translationBengali,\n      surahNameBengali: enhanced.surahNameBengali,\n      aiInsight: enhanced.aiInsight,\n      aiInsightBengali: enhanced.aiInsightBengali,\n    };\n  } catch (error) {\n    console.error(\"Error enhancing verse with AI:\", error);\n    // Return verse with fallback values if AI fails\n    return {\n      ...verse,\n      translationBengali: verse.translation, // Fallback to English if AI fails\n      surahNameBengali: verse.surahName,\n      aiInsight: \"This verse offers guidance and wisdom for believers.\",\n      aiInsightBengali: \"এই আয়াতটি বিশ্বাসীদের জন্য নির্দেশনা এবং প্রজ্ঞা প্রদান করে।\",\n    };\n  }\n}\n","size_bytes":3076},"server/openai-hadith.ts":{"content":"import OpenAI from \"openai\";\nimport type { Hadith } from \"@shared/schema\";\n\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n}) : null;\n\ninterface EnhancedHadith {\n  translationBengali: string;\n  narratorBengali: string;\n  bookNameBengali: string;\n  aiInsight: string;\n  aiInsightBengali: string;\n}\n\nexport async function enhanceHadithWithAI(hadith: Hadith): Promise<Hadith> {\n  if (!openai) {\n    return {\n      ...hadith,\n      translationBengali: null,\n      narratorBengali: null,\n      bookNameBengali: null,\n      aiInsight: \"This hadith provides guidance for daily life.\",\n      aiInsightBengali: \"এই হাদিসটি দৈনন্দিন জীবনের জন্য নির্দেশনা প্রদান করে।\",\n    };\n  }\n\n  try {\n    const prompt = `You are an Islamic scholar and Bengali translator specializing in Hadith. For the following Hadith from ${hadith.bookName}, provide:\n\n1. Bengali translation (accurate and respectful)\n2. Bengali narrator name\n3. Bengali book name\n4. A brief, meaningful insight in English (2-3 sentences) about the Hadith's message and practical application\n5. The same insight translated to Bengali\n\nHadith Details:\n- Book: ${hadith.bookName}\n- Reference: ${hadith.reference}\n- Narrator: ${hadith.narrator}\n- Arabic: ${hadith.arabic}\n- English Translation: ${hadith.translation}\n\nPlease respond in JSON format with these exact keys:\n{\n  \"translationBengali\": \"...\",\n  \"narratorBengali\": \"...\",\n  \"bookNameBengali\": \"...\",\n  \"aiInsight\": \"...\",\n  \"aiInsightBengali\": \"...\"\n}`;\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert Islamic scholar and Bengali translator. Provide accurate, respectful translations and meaningful insights about Hadiths from Sahih Bukhari and other authentic sources.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n    });\n\n    const content = completion.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No response from OpenAI\");\n    }\n\n    const enhanced = JSON.parse(content) as EnhancedHadith;\n\n    return {\n      ...hadith,\n      translationBengali: enhanced.translationBengali,\n      narratorBengali: enhanced.narratorBengali,\n      bookNameBengali: enhanced.bookNameBengali,\n      aiInsight: enhanced.aiInsight,\n      aiInsightBengali: enhanced.aiInsightBengali,\n    };\n  } catch (error) {\n    console.error(\"Error enhancing Hadith with AI:\", error);\n    return {\n      ...hadith,\n      translationBengali: null,\n      narratorBengali: null,\n      bookNameBengali: null,\n      aiInsight: \"This hadith provides guidance for daily life.\",\n      aiInsightBengali: \"এই হাদিসটি দৈনন্দিন জীবনের জন্য নির্দেশনা প্রদান করে।\",\n    };\n  }\n}\n","size_bytes":3051},"APK_GENERATION_GUIDE.md":{"content":"# APK Generation Guide for Islamic Companion\n\nThis guide explains how to generate and host an APK file for one-click downloads.\n\n## Current Implementation\n\nThe app currently provides two installation methods:\n\n1. **One-Click PWA Install** (Recommended for Android Chrome/Edge users)\n   - True one-click installation\n   - Works automatically on supported browsers\n   - No manual steps required\n\n2. **APK Generation** (For users who need an APK file)\n   - Redirects to PWABuilder\n   - Requires manual steps to generate APK\n\n## How to Enable True One-Click APK Downloads\n\nTo provide a true one-click APK download, you need to:\n\n### Step 1: Generate the APK\n\n**Option A: Using PWABuilder (Recommended)**\n1. Visit https://www.pwabuilder.com/\n2. Enter your app URL: `https://bfa83450-e62e-4f16-a2ec-274d2dff5b30-00-rlkizufjxbf4.picard.replit.dev`\n3. Click \"Start\" and wait for analysis\n4. Click \"Package for Android\"\n5. Fill in the required details:\n   - Package ID: `com.islamiccompanion.app`\n   - App name: `Islamic Companion`\n   - Version: `1.0.0`\n6. Download the generated APK file\n\n**Option B: Using AppsGeyser (Free)**\n1. Visit https://appsgeyser.com/\n2. Select \"Website\" template\n3. Enter your app URL\n4. Customize app name and icon\n5. Click \"Create App\"\n6. Download the APK from your dashboard\n\n### Step 2: Host the APK\n\nOnce you have the APK file:\n\n1. Create a folder: `mkdir -p client/public/downloads`\n2. Place your APK: `client/public/downloads/islamic-companion.apk`\n3. Update the download endpoint in `server/routes.ts`:\n\n```typescript\napp.get(\"/download/apk\", (req, res) => {\n  const apkPath = path.join(__dirname, \"../client/public/downloads/islamic-companion.apk\");\n  res.download(apkPath, \"IslamicCompanion.apk\");\n});\n```\n\n4. Update the button in Settings to trigger direct download:\n\n```typescript\nconst handleDownloadAPK = () => {\n  window.location.href = '/download/apk';\n};\n```\n\n### Step 3: Maintaining the APK\n\nWhen you update your web app:\n1. Regenerate the APK using the same method\n2. Replace the old APK file with the new one\n3. Update the version number\n4. Users can download and install the updated APK\n\n## Important Notes\n\n- **Signing Keys**: Keep your signing keys safe and use the same keys for updates\n- **Version Control**: Increment version numbers for each update\n- **File Size**: APK files are typically 5-15 MB depending on features\n- **Updates**: Users need to manually install new APK versions\n\n## Current Status\n\n✅ PWA infrastructure set up (manifest.json, service-worker.js)\n✅ PWA one-click install working for Android browsers\n✅ Download endpoint redirects to PWABuilder\n⏳ Actual APK file hosting (requires manual APK generation as described above)\n\n## Recommendation\n\nFor most users, the **PWA install option is the best choice** because:\n- True one-click installation\n- Automatic updates\n- No manual APK management\n- Smaller file size\n- Better security\n\nThe APK download option is available for users who specifically need an APK file or can't use PWA installation.\n","size_bytes":3013},"client/public/service-worker.js":{"content":"const CACHE_NAME = 'islamic-companion-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => response || fetch(event.request))\n  );\n});\n","size_bytes":412}},"version":1}